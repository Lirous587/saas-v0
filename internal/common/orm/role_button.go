// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// RoleButton is an object representing the database table.
type RoleButton struct {
	ID       int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleID   int64 `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	ButtonID int64 `boil:"button_id" json:"button_id" toml:"button_id" yaml:"button_id"`

	R *roleButtonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleButtonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleButtonColumns = struct {
	ID       string
	RoleID   string
	ButtonID string
}{
	ID:       "id",
	RoleID:   "role_id",
	ButtonID: "button_id",
}

var RoleButtonTableColumns = struct {
	ID       string
	RoleID   string
	ButtonID string
}{
	ID:       "role_button.id",
	RoleID:   "role_button.role_id",
	ButtonID: "role_button.button_id",
}

// Generated where

var RoleButtonWhere = struct {
	ID       whereHelperint64
	RoleID   whereHelperint64
	ButtonID whereHelperint64
}{
	ID:       whereHelperint64{field: "\"role_button\".\"id\""},
	RoleID:   whereHelperint64{field: "\"role_button\".\"role_id\""},
	ButtonID: whereHelperint64{field: "\"role_button\".\"button_id\""},
}

// RoleButtonRels is where relationship names are stored.
var RoleButtonRels = struct {
	Button string
	Role   string
}{
	Button: "Button",
	Role:   "Role",
}

// roleButtonR is where relationships are stored.
type roleButtonR struct {
	Button *Button `boil:"Button" json:"Button" toml:"Button" yaml:"Button"`
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
}

// NewStruct creates a new relationship struct
func (*roleButtonR) NewStruct() *roleButtonR {
	return &roleButtonR{}
}

func (o *RoleButton) GetButton() *Button {
	if o == nil {
		return nil
	}

	return o.R.GetButton()
}

func (r *roleButtonR) GetButton() *Button {
	if r == nil {
		return nil
	}

	return r.Button
}

func (o *RoleButton) GetRole() *Role {
	if o == nil {
		return nil
	}

	return o.R.GetRole()
}

func (r *roleButtonR) GetRole() *Role {
	if r == nil {
		return nil
	}

	return r.Role
}

// roleButtonL is where Load methods for each relationship are stored.
type roleButtonL struct{}

var (
	roleButtonAllColumns            = []string{"id", "role_id", "button_id"}
	roleButtonColumnsWithoutDefault = []string{"role_id", "button_id"}
	roleButtonColumnsWithDefault    = []string{"id"}
	roleButtonPrimaryKeyColumns     = []string{"id"}
	roleButtonGeneratedColumns      = []string{}
)

type (
	// RoleButtonSlice is an alias for a slice of pointers to RoleButton.
	// This should almost always be used instead of []RoleButton.
	RoleButtonSlice []*RoleButton
	// RoleButtonHook is the signature for custom RoleButton hook methods
	RoleButtonHook func(boil.Executor, *RoleButton) error

	roleButtonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleButtonType                 = reflect.TypeOf(&RoleButton{})
	roleButtonMapping              = queries.MakeStructMapping(roleButtonType)
	roleButtonPrimaryKeyMapping, _ = queries.BindMapping(roleButtonType, roleButtonMapping, roleButtonPrimaryKeyColumns)
	roleButtonInsertCacheMut       sync.RWMutex
	roleButtonInsertCache          = make(map[string]insertCache)
	roleButtonUpdateCacheMut       sync.RWMutex
	roleButtonUpdateCache          = make(map[string]updateCache)
	roleButtonUpsertCacheMut       sync.RWMutex
	roleButtonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleButtonAfterSelectMu sync.Mutex
var roleButtonAfterSelectHooks []RoleButtonHook

var roleButtonBeforeInsertMu sync.Mutex
var roleButtonBeforeInsertHooks []RoleButtonHook
var roleButtonAfterInsertMu sync.Mutex
var roleButtonAfterInsertHooks []RoleButtonHook

var roleButtonBeforeUpdateMu sync.Mutex
var roleButtonBeforeUpdateHooks []RoleButtonHook
var roleButtonAfterUpdateMu sync.Mutex
var roleButtonAfterUpdateHooks []RoleButtonHook

var roleButtonBeforeDeleteMu sync.Mutex
var roleButtonBeforeDeleteHooks []RoleButtonHook
var roleButtonAfterDeleteMu sync.Mutex
var roleButtonAfterDeleteHooks []RoleButtonHook

var roleButtonBeforeUpsertMu sync.Mutex
var roleButtonBeforeUpsertHooks []RoleButtonHook
var roleButtonAfterUpsertMu sync.Mutex
var roleButtonAfterUpsertHooks []RoleButtonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleButton) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleButton) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleButton) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleButton) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleButton) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleButton) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleButton) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleButton) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleButton) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleButtonAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleButtonHook registers your hook function for all future operations.
func AddRoleButtonHook(hookPoint boil.HookPoint, roleButtonHook RoleButtonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roleButtonAfterSelectMu.Lock()
		roleButtonAfterSelectHooks = append(roleButtonAfterSelectHooks, roleButtonHook)
		roleButtonAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roleButtonBeforeInsertMu.Lock()
		roleButtonBeforeInsertHooks = append(roleButtonBeforeInsertHooks, roleButtonHook)
		roleButtonBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roleButtonAfterInsertMu.Lock()
		roleButtonAfterInsertHooks = append(roleButtonAfterInsertHooks, roleButtonHook)
		roleButtonAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roleButtonBeforeUpdateMu.Lock()
		roleButtonBeforeUpdateHooks = append(roleButtonBeforeUpdateHooks, roleButtonHook)
		roleButtonBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roleButtonAfterUpdateMu.Lock()
		roleButtonAfterUpdateHooks = append(roleButtonAfterUpdateHooks, roleButtonHook)
		roleButtonAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roleButtonBeforeDeleteMu.Lock()
		roleButtonBeforeDeleteHooks = append(roleButtonBeforeDeleteHooks, roleButtonHook)
		roleButtonBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roleButtonAfterDeleteMu.Lock()
		roleButtonAfterDeleteHooks = append(roleButtonAfterDeleteHooks, roleButtonHook)
		roleButtonAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roleButtonBeforeUpsertMu.Lock()
		roleButtonBeforeUpsertHooks = append(roleButtonBeforeUpsertHooks, roleButtonHook)
		roleButtonBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roleButtonAfterUpsertMu.Lock()
		roleButtonAfterUpsertHooks = append(roleButtonAfterUpsertHooks, roleButtonHook)
		roleButtonAfterUpsertMu.Unlock()
	}
}

// OneG returns a single roleButton record from the query using the global executor.
func (q roleButtonQuery) OneG() (*RoleButton, error) {
	return q.One(boil.GetDB())
}

// One returns a single roleButton record from the query.
func (q roleButtonQuery) One(exec boil.Executor) (*RoleButton, error) {
	o := &RoleButton{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for role_button")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoleButton records from the query using the global executor.
func (q roleButtonQuery) AllG() (RoleButtonSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all RoleButton records from the query.
func (q roleButtonQuery) All(exec boil.Executor) (RoleButtonSlice, error) {
	var o []*RoleButton

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to RoleButton slice")
	}

	if len(roleButtonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoleButton records in the query using the global executor
func (q roleButtonQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all RoleButton records in the query.
func (q roleButtonQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count role_button rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roleButtonQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q roleButtonQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if role_button exists")
	}

	return count > 0, nil
}

// Button pointed to by the foreign key.
func (o *RoleButton) Button(mods ...qm.QueryMod) buttonQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.ButtonID),
	}

	queryMods = append(queryMods, mods...)

	return Buttons(queryMods...)
}

// Role pointed to by the foreign key.
func (o *RoleButton) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// LoadButton allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleButtonL) LoadButton(e boil.Executor, singular bool, maybeRoleButton interface{}, mods queries.Applicator) error {
	var slice []*RoleButton
	var object *RoleButton

	if singular {
		var ok bool
		object, ok = maybeRoleButton.(*RoleButton)
		if !ok {
			object = new(RoleButton)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleButton))
			}
		}
	} else {
		s, ok := maybeRoleButton.(*[]*RoleButton)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleButton))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleButtonR{}
		}
		args[object.ButtonID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleButtonR{}
			}

			args[obj.ButtonID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`buttons`),
		qm.WhereIn(`buttons.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Button")
	}

	var resultSlice []*Button
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Button")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for buttons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for buttons")
	}

	if len(buttonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Button = foreign
		if foreign.R == nil {
			foreign.R = &buttonR{}
		}
		foreign.R.RoleButtons = append(foreign.R.RoleButtons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.ButtonID == foreign.ID {
				local.R.Button = foreign
				if foreign.R == nil {
					foreign.R = &buttonR{}
				}
				foreign.R.RoleButtons = append(foreign.R.RoleButtons, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleButtonL) LoadRole(e boil.Executor, singular bool, maybeRoleButton interface{}, mods queries.Applicator) error {
	var slice []*RoleButton
	var object *RoleButton

	if singular {
		var ok bool
		object, ok = maybeRoleButton.(*RoleButton)
		if !ok {
			object = new(RoleButton)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleButton))
			}
		}
	} else {
		s, ok := maybeRoleButton.(*[]*RoleButton)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleButton))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleButtonR{}
		}
		args[object.RoleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleButtonR{}
			}

			args[obj.RoleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleButtons = append(foreign.R.RoleButtons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleButtons = append(foreign.R.RoleButtons, local)
				break
			}
		}
	}

	return nil
}

// SetButtonG of the roleButton to the related item.
// Sets o.R.Button to related.
// Adds o to related.R.RoleButtons.
// Uses the global database handle.
func (o *RoleButton) SetButtonG(insert bool, related *Button) error {
	return o.SetButton(boil.GetDB(), insert, related)
}

// SetButton of the roleButton to the related item.
// Sets o.R.Button to related.
// Adds o to related.R.RoleButtons.
func (o *RoleButton) SetButton(exec boil.Executor, insert bool, related *Button) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_button\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"button_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleButtonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.ButtonID = related.ID
	if o.R == nil {
		o.R = &roleButtonR{
			Button: related,
		}
	} else {
		o.R.Button = related
	}

	if related.R == nil {
		related.R = &buttonR{
			RoleButtons: RoleButtonSlice{o},
		}
	} else {
		related.R.RoleButtons = append(related.R.RoleButtons, o)
	}

	return nil
}

// SetRoleG of the roleButton to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleButtons.
// Uses the global database handle.
func (o *RoleButton) SetRoleG(insert bool, related *Role) error {
	return o.SetRole(boil.GetDB(), insert, related)
}

// SetRole of the roleButton to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleButtons.
func (o *RoleButton) SetRole(exec boil.Executor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_button\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleButtonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleButtonR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleButtons: RoleButtonSlice{o},
		}
	} else {
		related.R.RoleButtons = append(related.R.RoleButtons, o)
	}

	return nil
}

// RoleButtons retrieves all the records using an executor.
func RoleButtons(mods ...qm.QueryMod) roleButtonQuery {
	mods = append(mods, qm.From("\"role_button\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"role_button\".*"})
	}

	return roleButtonQuery{q}
}

// FindRoleButtonG retrieves a single record by ID.
func FindRoleButtonG(iD int64, selectCols ...string) (*RoleButton, error) {
	return FindRoleButton(boil.GetDB(), iD, selectCols...)
}

// FindRoleButton retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleButton(exec boil.Executor, iD int64, selectCols ...string) (*RoleButton, error) {
	roleButtonObj := &RoleButton{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_button\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, roleButtonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from role_button")
	}

	if err = roleButtonObj.doAfterSelectHooks(exec); err != nil {
		return roleButtonObj, err
	}

	return roleButtonObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleButton) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleButton) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no role_button provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleButtonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleButtonInsertCacheMut.RLock()
	cache, cached := roleButtonInsertCache[key]
	roleButtonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleButtonAllColumns,
			roleButtonColumnsWithDefault,
			roleButtonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleButtonType, roleButtonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleButtonType, roleButtonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_button\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_button\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into role_button")
	}

	if !cached {
		roleButtonInsertCacheMut.Lock()
		roleButtonInsertCache[key] = cache
		roleButtonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single RoleButton record using the global executor.
// See Update for more documentation.
func (o *RoleButton) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the RoleButton.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleButton) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleButtonUpdateCacheMut.RLock()
	cache, cached := roleButtonUpdateCache[key]
	roleButtonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleButtonAllColumns,
			roleButtonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update role_button, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_button\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleButtonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleButtonType, roleButtonMapping, append(wl, roleButtonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update role_button row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for role_button")
	}

	if !cached {
		roleButtonUpdateCacheMut.Lock()
		roleButtonUpdateCache[key] = cache
		roleButtonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roleButtonQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roleButtonQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for role_button")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for role_button")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleButtonSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleButtonSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleButtonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_button\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleButtonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in roleButton slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all roleButton")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleButton) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleButton) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no role_button provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleButtonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleButtonUpsertCacheMut.RLock()
	cache, cached := roleButtonUpsertCache[key]
	roleButtonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roleButtonAllColumns,
			roleButtonColumnsWithDefault,
			roleButtonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roleButtonAllColumns,
			roleButtonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert role_button, could not build update column list")
		}

		ret := strmangle.SetComplement(roleButtonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(roleButtonPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert role_button, could not build conflict column list")
			}

			conflict = make([]string, len(roleButtonPrimaryKeyColumns))
			copy(conflict, roleButtonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_button\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(roleButtonType, roleButtonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleButtonType, roleButtonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert role_button")
	}

	if !cached {
		roleButtonUpsertCacheMut.Lock()
		roleButtonUpsertCache[key] = cache
		roleButtonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single RoleButton record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleButton) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single RoleButton record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleButton) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no RoleButton provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleButtonPrimaryKeyMapping)
	sql := "DELETE FROM \"role_button\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from role_button")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for role_button")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roleButtonQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q roleButtonQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no roleButtonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from role_button")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for role_button")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoleButtonSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleButtonSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleButtonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleButtonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_button\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleButtonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from roleButton slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for role_button")
	}

	if len(roleButtonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleButton) ReloadG() error {
	if o == nil {
		return errors.New("orm: no RoleButton provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleButton) Reload(exec boil.Executor) error {
	ret, err := FindRoleButton(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleButtonSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty RoleButtonSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleButtonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleButtonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleButtonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_button\".* FROM \"role_button\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleButtonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in RoleButtonSlice")
	}

	*o = slice

	return nil
}

// RoleButtonExistsG checks if the RoleButton row exists.
func RoleButtonExistsG(iD int64) (bool, error) {
	return RoleButtonExists(boil.GetDB(), iD)
}

// RoleButtonExists checks if the RoleButton row exists.
func RoleButtonExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_button\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if role_button exists")
	}

	return exists, nil
}

// Exists checks if the RoleButton row exists.
func (o *RoleButton) Exists(exec boil.Executor) (bool, error) {
	return RoleButtonExists(exec, o.ID)
}
