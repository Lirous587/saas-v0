// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// CasbinRule is an object representing the database table.
type CasbinRule struct {
	ID    int         `boil:"id" json:"id" toml:"id" yaml:"id"`
	Ptype string      `boil:"ptype" json:"ptype" toml:"ptype" yaml:"ptype"`
	V0    null.String `boil:"v0" json:"v0,omitempty" toml:"v0" yaml:"v0,omitempty"`
	V1    null.String `boil:"v1" json:"v1,omitempty" toml:"v1" yaml:"v1,omitempty"`
	V2    null.String `boil:"v2" json:"v2,omitempty" toml:"v2" yaml:"v2,omitempty"`
	V3    null.String `boil:"v3" json:"v3,omitempty" toml:"v3" yaml:"v3,omitempty"`
	V4    null.String `boil:"v4" json:"v4,omitempty" toml:"v4" yaml:"v4,omitempty"`
	V5    null.String `boil:"v5" json:"v5,omitempty" toml:"v5" yaml:"v5,omitempty"`

	R *casbinRuleR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L casbinRuleL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var CasbinRuleColumns = struct {
	ID    string
	Ptype string
	V0    string
	V1    string
	V2    string
	V3    string
	V4    string
	V5    string
}{
	ID:    "id",
	Ptype: "ptype",
	V0:    "v0",
	V1:    "v1",
	V2:    "v2",
	V3:    "v3",
	V4:    "v4",
	V5:    "v5",
}

var CasbinRuleTableColumns = struct {
	ID    string
	Ptype string
	V0    string
	V1    string
	V2    string
	V3    string
	V4    string
	V5    string
}{
	ID:    "casbin_rule.id",
	Ptype: "casbin_rule.ptype",
	V0:    "casbin_rule.v0",
	V1:    "casbin_rule.v1",
	V2:    "casbin_rule.v2",
	V3:    "casbin_rule.v3",
	V4:    "casbin_rule.v4",
	V5:    "casbin_rule.v5",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var CasbinRuleWhere = struct {
	ID    whereHelperint
	Ptype whereHelperstring
	V0    whereHelpernull_String
	V1    whereHelpernull_String
	V2    whereHelpernull_String
	V3    whereHelpernull_String
	V4    whereHelpernull_String
	V5    whereHelpernull_String
}{
	ID:    whereHelperint{field: "\"casbin_rule\".\"id\""},
	Ptype: whereHelperstring{field: "\"casbin_rule\".\"ptype\""},
	V0:    whereHelpernull_String{field: "\"casbin_rule\".\"v0\""},
	V1:    whereHelpernull_String{field: "\"casbin_rule\".\"v1\""},
	V2:    whereHelpernull_String{field: "\"casbin_rule\".\"v2\""},
	V3:    whereHelpernull_String{field: "\"casbin_rule\".\"v3\""},
	V4:    whereHelpernull_String{field: "\"casbin_rule\".\"v4\""},
	V5:    whereHelpernull_String{field: "\"casbin_rule\".\"v5\""},
}

// CasbinRuleRels is where relationship names are stored.
var CasbinRuleRels = struct {
}{}

// casbinRuleR is where relationships are stored.
type casbinRuleR struct {
}

// NewStruct creates a new relationship struct
func (*casbinRuleR) NewStruct() *casbinRuleR {
	return &casbinRuleR{}
}

// casbinRuleL is where Load methods for each relationship are stored.
type casbinRuleL struct{}

var (
	casbinRuleAllColumns            = []string{"id", "ptype", "v0", "v1", "v2", "v3", "v4", "v5"}
	casbinRuleColumnsWithoutDefault = []string{"ptype"}
	casbinRuleColumnsWithDefault    = []string{"id", "v0", "v1", "v2", "v3", "v4", "v5"}
	casbinRulePrimaryKeyColumns     = []string{"id"}
	casbinRuleGeneratedColumns      = []string{}
)

type (
	// CasbinRuleSlice is an alias for a slice of pointers to CasbinRule.
	// This should almost always be used instead of []CasbinRule.
	CasbinRuleSlice []*CasbinRule
	// CasbinRuleHook is the signature for custom CasbinRule hook methods
	CasbinRuleHook func(boil.Executor, *CasbinRule) error

	casbinRuleQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	casbinRuleType                 = reflect.TypeOf(&CasbinRule{})
	casbinRuleMapping              = queries.MakeStructMapping(casbinRuleType)
	casbinRulePrimaryKeyMapping, _ = queries.BindMapping(casbinRuleType, casbinRuleMapping, casbinRulePrimaryKeyColumns)
	casbinRuleInsertCacheMut       sync.RWMutex
	casbinRuleInsertCache          = make(map[string]insertCache)
	casbinRuleUpdateCacheMut       sync.RWMutex
	casbinRuleUpdateCache          = make(map[string]updateCache)
	casbinRuleUpsertCacheMut       sync.RWMutex
	casbinRuleUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var casbinRuleAfterSelectMu sync.Mutex
var casbinRuleAfterSelectHooks []CasbinRuleHook

var casbinRuleBeforeInsertMu sync.Mutex
var casbinRuleBeforeInsertHooks []CasbinRuleHook
var casbinRuleAfterInsertMu sync.Mutex
var casbinRuleAfterInsertHooks []CasbinRuleHook

var casbinRuleBeforeUpdateMu sync.Mutex
var casbinRuleBeforeUpdateHooks []CasbinRuleHook
var casbinRuleAfterUpdateMu sync.Mutex
var casbinRuleAfterUpdateHooks []CasbinRuleHook

var casbinRuleBeforeDeleteMu sync.Mutex
var casbinRuleBeforeDeleteHooks []CasbinRuleHook
var casbinRuleAfterDeleteMu sync.Mutex
var casbinRuleAfterDeleteHooks []CasbinRuleHook

var casbinRuleBeforeUpsertMu sync.Mutex
var casbinRuleBeforeUpsertHooks []CasbinRuleHook
var casbinRuleAfterUpsertMu sync.Mutex
var casbinRuleAfterUpsertHooks []CasbinRuleHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *CasbinRule) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *CasbinRule) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *CasbinRule) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *CasbinRule) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *CasbinRule) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *CasbinRule) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *CasbinRule) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *CasbinRule) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *CasbinRule) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range casbinRuleAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddCasbinRuleHook registers your hook function for all future operations.
func AddCasbinRuleHook(hookPoint boil.HookPoint, casbinRuleHook CasbinRuleHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		casbinRuleAfterSelectMu.Lock()
		casbinRuleAfterSelectHooks = append(casbinRuleAfterSelectHooks, casbinRuleHook)
		casbinRuleAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		casbinRuleBeforeInsertMu.Lock()
		casbinRuleBeforeInsertHooks = append(casbinRuleBeforeInsertHooks, casbinRuleHook)
		casbinRuleBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		casbinRuleAfterInsertMu.Lock()
		casbinRuleAfterInsertHooks = append(casbinRuleAfterInsertHooks, casbinRuleHook)
		casbinRuleAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		casbinRuleBeforeUpdateMu.Lock()
		casbinRuleBeforeUpdateHooks = append(casbinRuleBeforeUpdateHooks, casbinRuleHook)
		casbinRuleBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		casbinRuleAfterUpdateMu.Lock()
		casbinRuleAfterUpdateHooks = append(casbinRuleAfterUpdateHooks, casbinRuleHook)
		casbinRuleAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		casbinRuleBeforeDeleteMu.Lock()
		casbinRuleBeforeDeleteHooks = append(casbinRuleBeforeDeleteHooks, casbinRuleHook)
		casbinRuleBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		casbinRuleAfterDeleteMu.Lock()
		casbinRuleAfterDeleteHooks = append(casbinRuleAfterDeleteHooks, casbinRuleHook)
		casbinRuleAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		casbinRuleBeforeUpsertMu.Lock()
		casbinRuleBeforeUpsertHooks = append(casbinRuleBeforeUpsertHooks, casbinRuleHook)
		casbinRuleBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		casbinRuleAfterUpsertMu.Lock()
		casbinRuleAfterUpsertHooks = append(casbinRuleAfterUpsertHooks, casbinRuleHook)
		casbinRuleAfterUpsertMu.Unlock()
	}
}

// OneG returns a single casbinRule record from the query using the global executor.
func (q casbinRuleQuery) OneG() (*CasbinRule, error) {
	return q.One(boil.GetDB())
}

// One returns a single casbinRule record from the query.
func (q casbinRuleQuery) One(exec boil.Executor) (*CasbinRule, error) {
	o := &CasbinRule{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for casbin_rule")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all CasbinRule records from the query using the global executor.
func (q casbinRuleQuery) AllG() (CasbinRuleSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all CasbinRule records from the query.
func (q casbinRuleQuery) All(exec boil.Executor) (CasbinRuleSlice, error) {
	var o []*CasbinRule

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to CasbinRule slice")
	}

	if len(casbinRuleAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all CasbinRule records in the query using the global executor
func (q casbinRuleQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all CasbinRule records in the query.
func (q casbinRuleQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count casbin_rule rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q casbinRuleQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q casbinRuleQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if casbin_rule exists")
	}

	return count > 0, nil
}

// CasbinRules retrieves all the records using an executor.
func CasbinRules(mods ...qm.QueryMod) casbinRuleQuery {
	mods = append(mods, qm.From("\"casbin_rule\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"casbin_rule\".*"})
	}

	return casbinRuleQuery{q}
}

// FindCasbinRuleG retrieves a single record by ID.
func FindCasbinRuleG(iD int, selectCols ...string) (*CasbinRule, error) {
	return FindCasbinRule(boil.GetDB(), iD, selectCols...)
}

// FindCasbinRule retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindCasbinRule(exec boil.Executor, iD int, selectCols ...string) (*CasbinRule, error) {
	casbinRuleObj := &CasbinRule{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"casbin_rule\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, casbinRuleObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from casbin_rule")
	}

	if err = casbinRuleObj.doAfterSelectHooks(exec); err != nil {
		return casbinRuleObj, err
	}

	return casbinRuleObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *CasbinRule) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *CasbinRule) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no casbin_rule provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(casbinRuleColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	casbinRuleInsertCacheMut.RLock()
	cache, cached := casbinRuleInsertCache[key]
	casbinRuleInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			casbinRuleAllColumns,
			casbinRuleColumnsWithDefault,
			casbinRuleColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(casbinRuleType, casbinRuleMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(casbinRuleType, casbinRuleMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"casbin_rule\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"casbin_rule\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into casbin_rule")
	}

	if !cached {
		casbinRuleInsertCacheMut.Lock()
		casbinRuleInsertCache[key] = cache
		casbinRuleInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single CasbinRule record using the global executor.
// See Update for more documentation.
func (o *CasbinRule) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the CasbinRule.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *CasbinRule) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	casbinRuleUpdateCacheMut.RLock()
	cache, cached := casbinRuleUpdateCache[key]
	casbinRuleUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			casbinRuleAllColumns,
			casbinRulePrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update casbin_rule, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"casbin_rule\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, casbinRulePrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(casbinRuleType, casbinRuleMapping, append(wl, casbinRulePrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update casbin_rule row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for casbin_rule")
	}

	if !cached {
		casbinRuleUpdateCacheMut.Lock()
		casbinRuleUpdateCache[key] = cache
		casbinRuleUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q casbinRuleQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q casbinRuleQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for casbin_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for casbin_rule")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o CasbinRuleSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o CasbinRuleSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), casbinRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"casbin_rule\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, casbinRulePrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in casbinRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all casbinRule")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *CasbinRule) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *CasbinRule) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no casbin_rule provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(casbinRuleColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	casbinRuleUpsertCacheMut.RLock()
	cache, cached := casbinRuleUpsertCache[key]
	casbinRuleUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			casbinRuleAllColumns,
			casbinRuleColumnsWithDefault,
			casbinRuleColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			casbinRuleAllColumns,
			casbinRulePrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert casbin_rule, could not build update column list")
		}

		ret := strmangle.SetComplement(casbinRuleAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(casbinRulePrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert casbin_rule, could not build conflict column list")
			}

			conflict = make([]string, len(casbinRulePrimaryKeyColumns))
			copy(conflict, casbinRulePrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"casbin_rule\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(casbinRuleType, casbinRuleMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(casbinRuleType, casbinRuleMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert casbin_rule")
	}

	if !cached {
		casbinRuleUpsertCacheMut.Lock()
		casbinRuleUpsertCache[key] = cache
		casbinRuleUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single CasbinRule record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *CasbinRule) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single CasbinRule record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *CasbinRule) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no CasbinRule provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), casbinRulePrimaryKeyMapping)
	sql := "DELETE FROM \"casbin_rule\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from casbin_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for casbin_rule")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q casbinRuleQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q casbinRuleQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no casbinRuleQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from casbin_rule")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for casbin_rule")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o CasbinRuleSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o CasbinRuleSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(casbinRuleBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), casbinRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"casbin_rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, casbinRulePrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from casbinRule slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for casbin_rule")
	}

	if len(casbinRuleAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *CasbinRule) ReloadG() error {
	if o == nil {
		return errors.New("orm: no CasbinRule provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *CasbinRule) Reload(exec boil.Executor) error {
	ret, err := FindCasbinRule(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CasbinRuleSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty CasbinRuleSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *CasbinRuleSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := CasbinRuleSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), casbinRulePrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"casbin_rule\".* FROM \"casbin_rule\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, casbinRulePrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in CasbinRuleSlice")
	}

	*o = slice

	return nil
}

// CasbinRuleExistsG checks if the CasbinRule row exists.
func CasbinRuleExistsG(iD int) (bool, error) {
	return CasbinRuleExists(boil.GetDB(), iD)
}

// CasbinRuleExists checks if the CasbinRule row exists.
func CasbinRuleExists(exec boil.Executor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"casbin_rule\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if casbin_rule exists")
	}

	return exists, nil
}

// Exists checks if the CasbinRule row exists.
func (o *CasbinRule) Exists(exec boil.Executor) (bool, error) {
	return CasbinRuleExists(exec, o.ID)
}
