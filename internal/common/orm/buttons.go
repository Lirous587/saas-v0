// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Button is an object representing the database table.
type Button struct {
	ID       int64  `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID int64  `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	MenuID   int64  `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`
	Name     string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Code     string `boil:"code" json:"code" toml:"code" yaml:"code"`

	R *buttonR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L buttonL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ButtonColumns = struct {
	ID       string
	TenantID string
	MenuID   string
	Name     string
	Code     string
}{
	ID:       "id",
	TenantID: "tenant_id",
	MenuID:   "menu_id",
	Name:     "name",
	Code:     "code",
}

var ButtonTableColumns = struct {
	ID       string
	TenantID string
	MenuID   string
	Name     string
	Code     string
}{
	ID:       "buttons.id",
	TenantID: "buttons.tenant_id",
	MenuID:   "buttons.menu_id",
	Name:     "buttons.name",
	Code:     "buttons.code",
}

// Generated where

var ButtonWhere = struct {
	ID       whereHelperint64
	TenantID whereHelperint64
	MenuID   whereHelperint64
	Name     whereHelperstring
	Code     whereHelperstring
}{
	ID:       whereHelperint64{field: "\"buttons\".\"id\""},
	TenantID: whereHelperint64{field: "\"buttons\".\"tenant_id\""},
	MenuID:   whereHelperint64{field: "\"buttons\".\"menu_id\""},
	Name:     whereHelperstring{field: "\"buttons\".\"name\""},
	Code:     whereHelperstring{field: "\"buttons\".\"code\""},
}

// ButtonRels is where relationship names are stored.
var ButtonRels = struct {
	Menu        string
	Tenant      string
	RoleButtons string
}{
	Menu:        "Menu",
	Tenant:      "Tenant",
	RoleButtons: "RoleButtons",
}

// buttonR is where relationships are stored.
type buttonR struct {
	Menu        *Menu           `boil:"Menu" json:"Menu" toml:"Menu" yaml:"Menu"`
	Tenant      *Tenant         `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	RoleButtons RoleButtonSlice `boil:"RoleButtons" json:"RoleButtons" toml:"RoleButtons" yaml:"RoleButtons"`
}

// NewStruct creates a new relationship struct
func (*buttonR) NewStruct() *buttonR {
	return &buttonR{}
}

func (o *Button) GetMenu() *Menu {
	if o == nil {
		return nil
	}

	return o.R.GetMenu()
}

func (r *buttonR) GetMenu() *Menu {
	if r == nil {
		return nil
	}

	return r.Menu
}

func (o *Button) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *buttonR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *Button) GetRoleButtons() RoleButtonSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRoleButtons()
}

func (r *buttonR) GetRoleButtons() RoleButtonSlice {
	if r == nil {
		return nil
	}

	return r.RoleButtons
}

// buttonL is where Load methods for each relationship are stored.
type buttonL struct{}

var (
	buttonAllColumns            = []string{"id", "tenant_id", "menu_id", "name", "code"}
	buttonColumnsWithoutDefault = []string{"tenant_id", "menu_id", "name", "code"}
	buttonColumnsWithDefault    = []string{"id"}
	buttonPrimaryKeyColumns     = []string{"id"}
	buttonGeneratedColumns      = []string{}
)

type (
	// ButtonSlice is an alias for a slice of pointers to Button.
	// This should almost always be used instead of []Button.
	ButtonSlice []*Button
	// ButtonHook is the signature for custom Button hook methods
	ButtonHook func(boil.Executor, *Button) error

	buttonQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	buttonType                 = reflect.TypeOf(&Button{})
	buttonMapping              = queries.MakeStructMapping(buttonType)
	buttonPrimaryKeyMapping, _ = queries.BindMapping(buttonType, buttonMapping, buttonPrimaryKeyColumns)
	buttonInsertCacheMut       sync.RWMutex
	buttonInsertCache          = make(map[string]insertCache)
	buttonUpdateCacheMut       sync.RWMutex
	buttonUpdateCache          = make(map[string]updateCache)
	buttonUpsertCacheMut       sync.RWMutex
	buttonUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var buttonAfterSelectMu sync.Mutex
var buttonAfterSelectHooks []ButtonHook

var buttonBeforeInsertMu sync.Mutex
var buttonBeforeInsertHooks []ButtonHook
var buttonAfterInsertMu sync.Mutex
var buttonAfterInsertHooks []ButtonHook

var buttonBeforeUpdateMu sync.Mutex
var buttonBeforeUpdateHooks []ButtonHook
var buttonAfterUpdateMu sync.Mutex
var buttonAfterUpdateHooks []ButtonHook

var buttonBeforeDeleteMu sync.Mutex
var buttonBeforeDeleteHooks []ButtonHook
var buttonAfterDeleteMu sync.Mutex
var buttonAfterDeleteHooks []ButtonHook

var buttonBeforeUpsertMu sync.Mutex
var buttonBeforeUpsertHooks []ButtonHook
var buttonAfterUpsertMu sync.Mutex
var buttonAfterUpsertHooks []ButtonHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Button) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Button) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Button) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Button) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Button) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Button) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Button) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Button) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Button) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range buttonAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddButtonHook registers your hook function for all future operations.
func AddButtonHook(hookPoint boil.HookPoint, buttonHook ButtonHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		buttonAfterSelectMu.Lock()
		buttonAfterSelectHooks = append(buttonAfterSelectHooks, buttonHook)
		buttonAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		buttonBeforeInsertMu.Lock()
		buttonBeforeInsertHooks = append(buttonBeforeInsertHooks, buttonHook)
		buttonBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		buttonAfterInsertMu.Lock()
		buttonAfterInsertHooks = append(buttonAfterInsertHooks, buttonHook)
		buttonAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		buttonBeforeUpdateMu.Lock()
		buttonBeforeUpdateHooks = append(buttonBeforeUpdateHooks, buttonHook)
		buttonBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		buttonAfterUpdateMu.Lock()
		buttonAfterUpdateHooks = append(buttonAfterUpdateHooks, buttonHook)
		buttonAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		buttonBeforeDeleteMu.Lock()
		buttonBeforeDeleteHooks = append(buttonBeforeDeleteHooks, buttonHook)
		buttonBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		buttonAfterDeleteMu.Lock()
		buttonAfterDeleteHooks = append(buttonAfterDeleteHooks, buttonHook)
		buttonAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		buttonBeforeUpsertMu.Lock()
		buttonBeforeUpsertHooks = append(buttonBeforeUpsertHooks, buttonHook)
		buttonBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		buttonAfterUpsertMu.Lock()
		buttonAfterUpsertHooks = append(buttonAfterUpsertHooks, buttonHook)
		buttonAfterUpsertMu.Unlock()
	}
}

// OneG returns a single button record from the query using the global executor.
func (q buttonQuery) OneG() (*Button, error) {
	return q.One(boil.GetDB())
}

// One returns a single button record from the query.
func (q buttonQuery) One(exec boil.Executor) (*Button, error) {
	o := &Button{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for buttons")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Button records from the query using the global executor.
func (q buttonQuery) AllG() (ButtonSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Button records from the query.
func (q buttonQuery) All(exec boil.Executor) (ButtonSlice, error) {
	var o []*Button

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Button slice")
	}

	if len(buttonAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Button records in the query using the global executor
func (q buttonQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Button records in the query.
func (q buttonQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count buttons rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q buttonQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q buttonQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if buttons exists")
	}

	return count > 0, nil
}

// Menu pointed to by the foreign key.
func (o *Button) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *Button) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// RoleButtons retrieves all the role_button's RoleButtons with an executor.
func (o *Button) RoleButtons(mods ...qm.QueryMod) roleButtonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_button\".\"button_id\"=?", o.ID),
	)

	return RoleButtons(queryMods...)
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (buttonL) LoadMenu(e boil.Executor, singular bool, maybeButton interface{}, mods queries.Applicator) error {
	var slice []*Button
	var object *Button

	if singular {
		var ok bool
		object, ok = maybeButton.(*Button)
		if !ok {
			object = new(Button)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeButton))
			}
		}
	} else {
		s, ok := maybeButton.(*[]*Button)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeButton))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &buttonR{}
		}
		args[object.MenuID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buttonR{}
			}

			args[obj.MenuID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.Buttons = append(foreign.R.Buttons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuID == foreign.ID {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.Buttons = append(foreign.R.Buttons, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (buttonL) LoadTenant(e boil.Executor, singular bool, maybeButton interface{}, mods queries.Applicator) error {
	var slice []*Button
	var object *Button

	if singular {
		var ok bool
		object, ok = maybeButton.(*Button)
		if !ok {
			object = new(Button)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeButton))
			}
		}
	} else {
		s, ok := maybeButton.(*[]*Button)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeButton))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &buttonR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buttonR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Buttons = append(foreign.R.Buttons, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Buttons = append(foreign.R.Buttons, local)
				break
			}
		}
	}

	return nil
}

// LoadRoleButtons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (buttonL) LoadRoleButtons(e boil.Executor, singular bool, maybeButton interface{}, mods queries.Applicator) error {
	var slice []*Button
	var object *Button

	if singular {
		var ok bool
		object, ok = maybeButton.(*Button)
		if !ok {
			object = new(Button)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeButton))
			}
		}
	} else {
		s, ok := maybeButton.(*[]*Button)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeButton)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeButton))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &buttonR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &buttonR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`role_button`),
		qm.WhereIn(`role_button.button_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_button")
	}

	var resultSlice []*RoleButton
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_button")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_button")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_button")
	}

	if len(roleButtonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleButtons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleButtonR{}
			}
			foreign.R.Button = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.ButtonID {
				local.R.RoleButtons = append(local.R.RoleButtons, foreign)
				if foreign.R == nil {
					foreign.R = &roleButtonR{}
				}
				foreign.R.Button = local
				break
			}
		}
	}

	return nil
}

// SetMenuG of the button to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.Buttons.
// Uses the global database handle.
func (o *Button) SetMenuG(insert bool, related *Menu) error {
	return o.SetMenu(boil.GetDB(), insert, related)
}

// SetMenu of the button to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.Buttons.
func (o *Button) SetMenu(exec boil.Executor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"buttons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, buttonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuID = related.ID
	if o.R == nil {
		o.R = &buttonR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			Buttons: ButtonSlice{o},
		}
	} else {
		related.R.Buttons = append(related.R.Buttons, o)
	}

	return nil
}

// SetTenantG of the button to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Buttons.
// Uses the global database handle.
func (o *Button) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the button to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Buttons.
func (o *Button) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"buttons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, buttonPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &buttonR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Buttons: ButtonSlice{o},
		}
	} else {
		related.R.Buttons = append(related.R.Buttons, o)
	}

	return nil
}

// AddRoleButtonsG adds the given related objects to the existing relationships
// of the button, optionally inserting them as new records.
// Appends related to o.R.RoleButtons.
// Sets related.R.Button appropriately.
// Uses the global database handle.
func (o *Button) AddRoleButtonsG(insert bool, related ...*RoleButton) error {
	return o.AddRoleButtons(boil.GetDB(), insert, related...)
}

// AddRoleButtons adds the given related objects to the existing relationships
// of the button, optionally inserting them as new records.
// Appends related to o.R.RoleButtons.
// Sets related.R.Button appropriately.
func (o *Button) AddRoleButtons(exec boil.Executor, insert bool, related ...*RoleButton) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.ButtonID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_button\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"button_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleButtonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.ButtonID = o.ID
		}
	}

	if o.R == nil {
		o.R = &buttonR{
			RoleButtons: related,
		}
	} else {
		o.R.RoleButtons = append(o.R.RoleButtons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleButtonR{
				Button: o,
			}
		} else {
			rel.R.Button = o
		}
	}
	return nil
}

// Buttons retrieves all the records using an executor.
func Buttons(mods ...qm.QueryMod) buttonQuery {
	mods = append(mods, qm.From("\"buttons\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"buttons\".*"})
	}

	return buttonQuery{q}
}

// FindButtonG retrieves a single record by ID.
func FindButtonG(iD int64, selectCols ...string) (*Button, error) {
	return FindButton(boil.GetDB(), iD, selectCols...)
}

// FindButton retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindButton(exec boil.Executor, iD int64, selectCols ...string) (*Button, error) {
	buttonObj := &Button{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"buttons\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, buttonObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from buttons")
	}

	if err = buttonObj.doAfterSelectHooks(exec); err != nil {
		return buttonObj, err
	}

	return buttonObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Button) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Button) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no buttons provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(buttonColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	buttonInsertCacheMut.RLock()
	cache, cached := buttonInsertCache[key]
	buttonInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			buttonAllColumns,
			buttonColumnsWithDefault,
			buttonColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(buttonType, buttonMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(buttonType, buttonMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"buttons\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"buttons\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into buttons")
	}

	if !cached {
		buttonInsertCacheMut.Lock()
		buttonInsertCache[key] = cache
		buttonInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Button record using the global executor.
// See Update for more documentation.
func (o *Button) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Button.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Button) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	buttonUpdateCacheMut.RLock()
	cache, cached := buttonUpdateCache[key]
	buttonUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			buttonAllColumns,
			buttonPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update buttons, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"buttons\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, buttonPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(buttonType, buttonMapping, append(wl, buttonPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update buttons row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for buttons")
	}

	if !cached {
		buttonUpdateCacheMut.Lock()
		buttonUpdateCache[key] = cache
		buttonUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q buttonQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q buttonQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for buttons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for buttons")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ButtonSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ButtonSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buttonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"buttons\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, buttonPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in button slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all button")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Button) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Button) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no buttons provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(buttonColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	buttonUpsertCacheMut.RLock()
	cache, cached := buttonUpsertCache[key]
	buttonUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			buttonAllColumns,
			buttonColumnsWithDefault,
			buttonColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			buttonAllColumns,
			buttonPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert buttons, could not build update column list")
		}

		ret := strmangle.SetComplement(buttonAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(buttonPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert buttons, could not build conflict column list")
			}

			conflict = make([]string, len(buttonPrimaryKeyColumns))
			copy(conflict, buttonPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"buttons\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(buttonType, buttonMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(buttonType, buttonMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert buttons")
	}

	if !cached {
		buttonUpsertCacheMut.Lock()
		buttonUpsertCache[key] = cache
		buttonUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Button record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Button) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Button record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Button) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Button provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), buttonPrimaryKeyMapping)
	sql := "DELETE FROM \"buttons\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from buttons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for buttons")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q buttonQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q buttonQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no buttonQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from buttons")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for buttons")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ButtonSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ButtonSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(buttonBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buttonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"buttons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, buttonPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from button slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for buttons")
	}

	if len(buttonAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Button) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Button provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Button) Reload(exec boil.Executor) error {
	ret, err := FindButton(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ButtonSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty ButtonSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ButtonSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ButtonSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), buttonPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"buttons\".* FROM \"buttons\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, buttonPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ButtonSlice")
	}

	*o = slice

	return nil
}

// ButtonExistsG checks if the Button row exists.
func ButtonExistsG(iD int64) (bool, error) {
	return ButtonExists(boil.GetDB(), iD)
}

// ButtonExists checks if the Button row exists.
func ButtonExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"buttons\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if buttons exists")
	}

	return exists, nil
}

// Exists checks if the Button row exists.
func (o *Button) Exists(exec boil.Executor) (bool, error) {
	return ButtonExists(exec, o.ID)
}
