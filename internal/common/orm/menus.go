// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Menu is an object representing the database table.
type Menu struct {
	ID       int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	TenantID int64       `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	Name     string      `boil:"name" json:"name" toml:"name" yaml:"name"`
	Path     null.String `boil:"path" json:"path,omitempty" toml:"path" yaml:"path,omitempty"`
	ParentID null.Int64  `boil:"parent_id" json:"parent_id,omitempty" toml:"parent_id" yaml:"parent_id,omitempty"`
	Sort     null.Int    `boil:"sort" json:"sort,omitempty" toml:"sort" yaml:"sort,omitempty"`

	R *menuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L menuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MenuColumns = struct {
	ID       string
	TenantID string
	Name     string
	Path     string
	ParentID string
	Sort     string
}{
	ID:       "id",
	TenantID: "tenant_id",
	Name:     "name",
	Path:     "path",
	ParentID: "parent_id",
	Sort:     "sort",
}

var MenuTableColumns = struct {
	ID       string
	TenantID string
	Name     string
	Path     string
	ParentID string
	Sort     string
}{
	ID:       "menus.id",
	TenantID: "menus.tenant_id",
	Name:     "menus.name",
	Path:     "menus.path",
	ParentID: "menus.parent_id",
	Sort:     "menus.sort",
}

// Generated where

type whereHelpernull_Int struct{ field string }

func (w whereHelpernull_Int) EQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_Int) NEQ(x null.Int) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_Int) LT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_Int) LTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_Int) GT(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_Int) GTE(x null.Int) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_Int) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_Int) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_Int) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_Int) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var MenuWhere = struct {
	ID       whereHelperint64
	TenantID whereHelperint64
	Name     whereHelperstring
	Path     whereHelpernull_String
	ParentID whereHelpernull_Int64
	Sort     whereHelpernull_Int
}{
	ID:       whereHelperint64{field: "\"menus\".\"id\""},
	TenantID: whereHelperint64{field: "\"menus\".\"tenant_id\""},
	Name:     whereHelperstring{field: "\"menus\".\"name\""},
	Path:     whereHelpernull_String{field: "\"menus\".\"path\""},
	ParentID: whereHelpernull_Int64{field: "\"menus\".\"parent_id\""},
	Sort:     whereHelpernull_Int{field: "\"menus\".\"sort\""},
}

// MenuRels is where relationship names are stored.
var MenuRels = struct {
	Tenant    string
	Buttons   string
	RoleMenus string
}{
	Tenant:    "Tenant",
	Buttons:   "Buttons",
	RoleMenus: "RoleMenus",
}

// menuR is where relationships are stored.
type menuR struct {
	Tenant    *Tenant       `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	Buttons   ButtonSlice   `boil:"Buttons" json:"Buttons" toml:"Buttons" yaml:"Buttons"`
	RoleMenus RoleMenuSlice `boil:"RoleMenus" json:"RoleMenus" toml:"RoleMenus" yaml:"RoleMenus"`
}

// NewStruct creates a new relationship struct
func (*menuR) NewStruct() *menuR {
	return &menuR{}
}

func (o *Menu) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *menuR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *Menu) GetButtons() ButtonSlice {
	if o == nil {
		return nil
	}

	return o.R.GetButtons()
}

func (r *menuR) GetButtons() ButtonSlice {
	if r == nil {
		return nil
	}

	return r.Buttons
}

func (o *Menu) GetRoleMenus() RoleMenuSlice {
	if o == nil {
		return nil
	}

	return o.R.GetRoleMenus()
}

func (r *menuR) GetRoleMenus() RoleMenuSlice {
	if r == nil {
		return nil
	}

	return r.RoleMenus
}

// menuL is where Load methods for each relationship are stored.
type menuL struct{}

var (
	menuAllColumns            = []string{"id", "tenant_id", "name", "path", "parent_id", "sort"}
	menuColumnsWithoutDefault = []string{"tenant_id", "name"}
	menuColumnsWithDefault    = []string{"id", "path", "parent_id", "sort"}
	menuPrimaryKeyColumns     = []string{"id"}
	menuGeneratedColumns      = []string{}
)

type (
	// MenuSlice is an alias for a slice of pointers to Menu.
	// This should almost always be used instead of []Menu.
	MenuSlice []*Menu
	// MenuHook is the signature for custom Menu hook methods
	MenuHook func(boil.Executor, *Menu) error

	menuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	menuType                 = reflect.TypeOf(&Menu{})
	menuMapping              = queries.MakeStructMapping(menuType)
	menuPrimaryKeyMapping, _ = queries.BindMapping(menuType, menuMapping, menuPrimaryKeyColumns)
	menuInsertCacheMut       sync.RWMutex
	menuInsertCache          = make(map[string]insertCache)
	menuUpdateCacheMut       sync.RWMutex
	menuUpdateCache          = make(map[string]updateCache)
	menuUpsertCacheMut       sync.RWMutex
	menuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var menuAfterSelectMu sync.Mutex
var menuAfterSelectHooks []MenuHook

var menuBeforeInsertMu sync.Mutex
var menuBeforeInsertHooks []MenuHook
var menuAfterInsertMu sync.Mutex
var menuAfterInsertHooks []MenuHook

var menuBeforeUpdateMu sync.Mutex
var menuBeforeUpdateHooks []MenuHook
var menuAfterUpdateMu sync.Mutex
var menuAfterUpdateHooks []MenuHook

var menuBeforeDeleteMu sync.Mutex
var menuBeforeDeleteHooks []MenuHook
var menuAfterDeleteMu sync.Mutex
var menuAfterDeleteHooks []MenuHook

var menuBeforeUpsertMu sync.Mutex
var menuBeforeUpsertHooks []MenuHook
var menuAfterUpsertMu sync.Mutex
var menuAfterUpsertHooks []MenuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Menu) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range menuAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Menu) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range menuBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Menu) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range menuAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Menu) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range menuBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Menu) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range menuAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Menu) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range menuBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Menu) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range menuAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Menu) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range menuBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Menu) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range menuAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMenuHook registers your hook function for all future operations.
func AddMenuHook(hookPoint boil.HookPoint, menuHook MenuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		menuAfterSelectMu.Lock()
		menuAfterSelectHooks = append(menuAfterSelectHooks, menuHook)
		menuAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		menuBeforeInsertMu.Lock()
		menuBeforeInsertHooks = append(menuBeforeInsertHooks, menuHook)
		menuBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		menuAfterInsertMu.Lock()
		menuAfterInsertHooks = append(menuAfterInsertHooks, menuHook)
		menuAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		menuBeforeUpdateMu.Lock()
		menuBeforeUpdateHooks = append(menuBeforeUpdateHooks, menuHook)
		menuBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		menuAfterUpdateMu.Lock()
		menuAfterUpdateHooks = append(menuAfterUpdateHooks, menuHook)
		menuAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		menuBeforeDeleteMu.Lock()
		menuBeforeDeleteHooks = append(menuBeforeDeleteHooks, menuHook)
		menuBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		menuAfterDeleteMu.Lock()
		menuAfterDeleteHooks = append(menuAfterDeleteHooks, menuHook)
		menuAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		menuBeforeUpsertMu.Lock()
		menuBeforeUpsertHooks = append(menuBeforeUpsertHooks, menuHook)
		menuBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		menuAfterUpsertMu.Lock()
		menuAfterUpsertHooks = append(menuAfterUpsertHooks, menuHook)
		menuAfterUpsertMu.Unlock()
	}
}

// OneG returns a single menu record from the query using the global executor.
func (q menuQuery) OneG() (*Menu, error) {
	return q.One(boil.GetDB())
}

// One returns a single menu record from the query.
func (q menuQuery) One(exec boil.Executor) (*Menu, error) {
	o := &Menu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for menus")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Menu records from the query using the global executor.
func (q menuQuery) AllG() (MenuSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Menu records from the query.
func (q menuQuery) All(exec boil.Executor) (MenuSlice, error) {
	var o []*Menu

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Menu slice")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Menu records in the query using the global executor
func (q menuQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Menu records in the query.
func (q menuQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count menus rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q menuQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q menuQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if menus exists")
	}

	return count > 0, nil
}

// Tenant pointed to by the foreign key.
func (o *Menu) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// Buttons retrieves all the button's Buttons with an executor.
func (o *Menu) Buttons(mods ...qm.QueryMod) buttonQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"buttons\".\"menu_id\"=?", o.ID),
	)

	return Buttons(queryMods...)
}

// RoleMenus retrieves all the role_menu's RoleMenus with an executor.
func (o *Menu) RoleMenus(mods ...qm.QueryMod) roleMenuQuery {
	var queryMods []qm.QueryMod
	if len(mods) != 0 {
		queryMods = append(queryMods, mods...)
	}

	queryMods = append(queryMods,
		qm.Where("\"role_menu\".\"menu_id\"=?", o.ID),
	)

	return RoleMenus(queryMods...)
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (menuL) LoadTenant(e boil.Executor, singular bool, maybeMenu interface{}, mods queries.Applicator) error {
	var slice []*Menu
	var object *Menu

	if singular {
		var ok bool
		object, ok = maybeMenu.(*Menu)
		if !ok {
			object = new(Menu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenu))
			}
		}
	} else {
		s, ok := maybeMenu.(*[]*Menu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenu))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.Menus = append(foreign.R.Menus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.Menus = append(foreign.R.Menus, local)
				break
			}
		}
	}

	return nil
}

// LoadButtons allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuL) LoadButtons(e boil.Executor, singular bool, maybeMenu interface{}, mods queries.Applicator) error {
	var slice []*Menu
	var object *Menu

	if singular {
		var ok bool
		object, ok = maybeMenu.(*Menu)
		if !ok {
			object = new(Menu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenu))
			}
		}
	} else {
		s, ok := maybeMenu.(*[]*Menu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenu))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`buttons`),
		qm.WhereIn(`buttons.menu_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load buttons")
	}

	var resultSlice []*Button
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice buttons")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on buttons")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for buttons")
	}

	if len(buttonAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.Buttons = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &buttonR{}
			}
			foreign.R.Menu = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MenuID {
				local.R.Buttons = append(local.R.Buttons, foreign)
				if foreign.R == nil {
					foreign.R = &buttonR{}
				}
				foreign.R.Menu = local
				break
			}
		}
	}

	return nil
}

// LoadRoleMenus allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for a 1-M or N-M relationship.
func (menuL) LoadRoleMenus(e boil.Executor, singular bool, maybeMenu interface{}, mods queries.Applicator) error {
	var slice []*Menu
	var object *Menu

	if singular {
		var ok bool
		object, ok = maybeMenu.(*Menu)
		if !ok {
			object = new(Menu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMenu))
			}
		}
	} else {
		s, ok := maybeMenu.(*[]*Menu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMenu))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &menuR{}
		}
		args[object.ID] = struct{}{}
	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &menuR{}
			}
			args[obj.ID] = struct{}{}
		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`role_menu`),
		qm.WhereIn(`role_menu.menu_id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load role_menu")
	}

	var resultSlice []*RoleMenu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice role_menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results in eager load on role_menu")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for role_menu")
	}

	if len(roleMenuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}
	if singular {
		object.R.RoleMenus = resultSlice
		for _, foreign := range resultSlice {
			if foreign.R == nil {
				foreign.R = &roleMenuR{}
			}
			foreign.R.Menu = object
		}
		return nil
	}

	for _, foreign := range resultSlice {
		for _, local := range slice {
			if local.ID == foreign.MenuID {
				local.R.RoleMenus = append(local.R.RoleMenus, foreign)
				if foreign.R == nil {
					foreign.R = &roleMenuR{}
				}
				foreign.R.Menu = local
				break
			}
		}
	}

	return nil
}

// SetTenantG of the menu to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Menus.
// Uses the global database handle.
func (o *Menu) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the menu to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.Menus.
func (o *Menu) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"menus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, menuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &menuR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			Menus: MenuSlice{o},
		}
	} else {
		related.R.Menus = append(related.R.Menus, o)
	}

	return nil
}

// AddButtonsG adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.Buttons.
// Sets related.R.Menu appropriately.
// Uses the global database handle.
func (o *Menu) AddButtonsG(insert bool, related ...*Button) error {
	return o.AddButtons(boil.GetDB(), insert, related...)
}

// AddButtons adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.Buttons.
// Sets related.R.Menu appropriately.
func (o *Menu) AddButtons(exec boil.Executor, insert bool, related ...*Button) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MenuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"buttons\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
				strmangle.WhereClause("\"", "\"", 2, buttonPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MenuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &menuR{
			Buttons: related,
		}
	} else {
		o.R.Buttons = append(o.R.Buttons, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &buttonR{
				Menu: o,
			}
		} else {
			rel.R.Menu = o
		}
	}
	return nil
}

// AddRoleMenusG adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.Menu appropriately.
// Uses the global database handle.
func (o *Menu) AddRoleMenusG(insert bool, related ...*RoleMenu) error {
	return o.AddRoleMenus(boil.GetDB(), insert, related...)
}

// AddRoleMenus adds the given related objects to the existing relationships
// of the menu, optionally inserting them as new records.
// Appends related to o.R.RoleMenus.
// Sets related.R.Menu appropriately.
func (o *Menu) AddRoleMenus(exec boil.Executor, insert bool, related ...*RoleMenu) error {
	var err error
	for _, rel := range related {
		if insert {
			rel.MenuID = o.ID
			if err = rel.Insert(exec, boil.Infer()); err != nil {
				return errors.Wrap(err, "failed to insert into foreign table")
			}
		} else {
			updateQuery := fmt.Sprintf(
				"UPDATE \"role_menu\" SET %s WHERE %s",
				strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
				strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
			)
			values := []interface{}{o.ID, rel.ID}

			if boil.DebugMode {
				fmt.Fprintln(boil.DebugWriter, updateQuery)
				fmt.Fprintln(boil.DebugWriter, values)
			}
			if _, err = exec.Exec(updateQuery, values...); err != nil {
				return errors.Wrap(err, "failed to update foreign table")
			}

			rel.MenuID = o.ID
		}
	}

	if o.R == nil {
		o.R = &menuR{
			RoleMenus: related,
		}
	} else {
		o.R.RoleMenus = append(o.R.RoleMenus, related...)
	}

	for _, rel := range related {
		if rel.R == nil {
			rel.R = &roleMenuR{
				Menu: o,
			}
		} else {
			rel.R.Menu = o
		}
	}
	return nil
}

// Menus retrieves all the records using an executor.
func Menus(mods ...qm.QueryMod) menuQuery {
	mods = append(mods, qm.From("\"menus\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"menus\".*"})
	}

	return menuQuery{q}
}

// FindMenuG retrieves a single record by ID.
func FindMenuG(iD int64, selectCols ...string) (*Menu, error) {
	return FindMenu(boil.GetDB(), iD, selectCols...)
}

// FindMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMenu(exec boil.Executor, iD int64, selectCols ...string) (*Menu, error) {
	menuObj := &Menu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"menus\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, menuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from menus")
	}

	if err = menuObj.doAfterSelectHooks(exec); err != nil {
		return menuObj, err
	}

	return menuObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Menu) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Menu) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no menus provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	menuInsertCacheMut.RLock()
	cache, cached := menuInsertCache[key]
	menuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			menuAllColumns,
			menuColumnsWithDefault,
			menuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(menuType, menuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"menus\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"menus\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into menus")
	}

	if !cached {
		menuInsertCacheMut.Lock()
		menuInsertCache[key] = cache
		menuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Menu record using the global executor.
// See Update for more documentation.
func (o *Menu) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Menu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Menu) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	menuUpdateCacheMut.RLock()
	cache, cached := menuUpdateCache[key]
	menuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			menuAllColumns,
			menuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update menus, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"menus\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, menuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, append(wl, menuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update menus row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for menus")
	}

	if !cached {
		menuUpdateCacheMut.Lock()
		menuUpdateCache[key] = cache
		menuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q menuQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q menuQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for menus")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o MenuSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MenuSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"menus\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, menuPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in menu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all menu")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Menu) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Menu) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no menus provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(menuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	menuUpsertCacheMut.RLock()
	cache, cached := menuUpsertCache[key]
	menuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			menuAllColumns,
			menuColumnsWithDefault,
			menuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			menuAllColumns,
			menuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert menus, could not build update column list")
		}

		ret := strmangle.SetComplement(menuAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(menuPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert menus, could not build conflict column list")
			}

			conflict = make([]string, len(menuPrimaryKeyColumns))
			copy(conflict, menuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"menus\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(menuType, menuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(menuType, menuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert menus")
	}

	if !cached {
		menuUpsertCacheMut.Lock()
		menuUpsertCache[key] = cache
		menuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Menu record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Menu) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Menu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Menu) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Menu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), menuPrimaryKeyMapping)
	sql := "DELETE FROM \"menus\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for menus")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q menuQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q menuQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no menuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from menus")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for menus")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o MenuSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MenuSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(menuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"menus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from menu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for menus")
	}

	if len(menuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Menu) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Menu provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Menu) Reload(exec boil.Executor) error {
	ret, err := FindMenu(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty MenuSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MenuSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), menuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"menus\".* FROM \"menus\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, menuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in MenuSlice")
	}

	*o = slice

	return nil
}

// MenuExistsG checks if the Menu row exists.
func MenuExistsG(iD int64) (bool, error) {
	return MenuExists(boil.GetDB(), iD)
}

// MenuExists checks if the Menu row exists.
func MenuExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"menus\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if menus exists")
	}

	return exists, nil
}

// Exists checks if the Menu row exists.
func (o *Menu) Exists(exec boil.Executor) (bool, error) {
	return MenuExists(exec, o.ID)
}
