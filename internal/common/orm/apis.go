// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/null/v8"
	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// Api is an object representing the database table.
type Api struct {
	ID          int64       `boil:"id" json:"id" toml:"id" yaml:"id"`
	Method      string      `boil:"method" json:"method" toml:"method" yaml:"method"`
	Path        string      `boil:"path" json:"path" toml:"path" yaml:"path"`
	Description null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`

	R *apiR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L apiL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var ApiColumns = struct {
	ID          string
	Method      string
	Path        string
	Description string
}{
	ID:          "id",
	Method:      "method",
	Path:        "path",
	Description: "description",
}

var ApiTableColumns = struct {
	ID          string
	Method      string
	Path        string
	Description string
}{
	ID:          "apis.id",
	Method:      "apis.method",
	Path:        "apis.path",
	Description: "apis.description",
}

// Generated where

type whereHelperint64 struct{ field string }

func (w whereHelperint64) EQ(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint64) NEQ(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint64) LT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint64) LTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint64) GT(x int64) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint64) GTE(x int64) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint64) IN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint64) NIN(slice []int64) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperstring struct{ field string }

func (w whereHelperstring) EQ(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperstring) NEQ(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperstring) LT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperstring) LTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperstring) GT(x string) qm.QueryMod      { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperstring) GTE(x string) qm.QueryMod     { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperstring) LIKE(x string) qm.QueryMod    { return qm.Where(w.field+" LIKE ?", x) }
func (w whereHelperstring) NLIKE(x string) qm.QueryMod   { return qm.Where(w.field+" NOT LIKE ?", x) }
func (w whereHelperstring) ILIKE(x string) qm.QueryMod   { return qm.Where(w.field+" ILIKE ?", x) }
func (w whereHelperstring) NILIKE(x string) qm.QueryMod  { return qm.Where(w.field+" NOT ILIKE ?", x) }
func (w whereHelperstring) SIMILAR(x string) qm.QueryMod { return qm.Where(w.field+" SIMILAR TO ?", x) }
func (w whereHelperstring) NSIMILAR(x string) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelperstring) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperstring) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) SIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" SIMILAR TO ?", x)
}
func (w whereHelpernull_String) NSIMILAR(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT SIMILAR TO ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var ApiWhere = struct {
	ID          whereHelperint64
	Method      whereHelperstring
	Path        whereHelperstring
	Description whereHelpernull_String
}{
	ID:          whereHelperint64{field: "\"apis\".\"id\""},
	Method:      whereHelperstring{field: "\"apis\".\"method\""},
	Path:        whereHelperstring{field: "\"apis\".\"path\""},
	Description: whereHelpernull_String{field: "\"apis\".\"description\""},
}

// ApiRels is where relationship names are stored.
var ApiRels = struct {
}{}

// apiR is where relationships are stored.
type apiR struct {
}

// NewStruct creates a new relationship struct
func (*apiR) NewStruct() *apiR {
	return &apiR{}
}

// apiL is where Load methods for each relationship are stored.
type apiL struct{}

var (
	apiAllColumns            = []string{"id", "method", "path", "description"}
	apiColumnsWithoutDefault = []string{"method", "path"}
	apiColumnsWithDefault    = []string{"id", "description"}
	apiPrimaryKeyColumns     = []string{"id"}
	apiGeneratedColumns      = []string{}
)

type (
	// ApiSlice is an alias for a slice of pointers to Api.
	// This should almost always be used instead of []Api.
	ApiSlice []*Api
	// ApiHook is the signature for custom Api hook methods
	ApiHook func(boil.Executor, *Api) error

	apiQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	apiType                 = reflect.TypeOf(&Api{})
	apiMapping              = queries.MakeStructMapping(apiType)
	apiPrimaryKeyMapping, _ = queries.BindMapping(apiType, apiMapping, apiPrimaryKeyColumns)
	apiInsertCacheMut       sync.RWMutex
	apiInsertCache          = make(map[string]insertCache)
	apiUpdateCacheMut       sync.RWMutex
	apiUpdateCache          = make(map[string]updateCache)
	apiUpsertCacheMut       sync.RWMutex
	apiUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var apiAfterSelectMu sync.Mutex
var apiAfterSelectHooks []ApiHook

var apiBeforeInsertMu sync.Mutex
var apiBeforeInsertHooks []ApiHook
var apiAfterInsertMu sync.Mutex
var apiAfterInsertHooks []ApiHook

var apiBeforeUpdateMu sync.Mutex
var apiBeforeUpdateHooks []ApiHook
var apiAfterUpdateMu sync.Mutex
var apiAfterUpdateHooks []ApiHook

var apiBeforeDeleteMu sync.Mutex
var apiBeforeDeleteHooks []ApiHook
var apiAfterDeleteMu sync.Mutex
var apiAfterDeleteHooks []ApiHook

var apiBeforeUpsertMu sync.Mutex
var apiBeforeUpsertHooks []ApiHook
var apiAfterUpsertMu sync.Mutex
var apiAfterUpsertHooks []ApiHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *Api) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range apiAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *Api) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *Api) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *Api) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range apiBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *Api) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range apiAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *Api) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range apiBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *Api) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range apiAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *Api) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *Api) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range apiAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddApiHook registers your hook function for all future operations.
func AddApiHook(hookPoint boil.HookPoint, apiHook ApiHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		apiAfterSelectMu.Lock()
		apiAfterSelectHooks = append(apiAfterSelectHooks, apiHook)
		apiAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		apiBeforeInsertMu.Lock()
		apiBeforeInsertHooks = append(apiBeforeInsertHooks, apiHook)
		apiBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		apiAfterInsertMu.Lock()
		apiAfterInsertHooks = append(apiAfterInsertHooks, apiHook)
		apiAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		apiBeforeUpdateMu.Lock()
		apiBeforeUpdateHooks = append(apiBeforeUpdateHooks, apiHook)
		apiBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		apiAfterUpdateMu.Lock()
		apiAfterUpdateHooks = append(apiAfterUpdateHooks, apiHook)
		apiAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		apiBeforeDeleteMu.Lock()
		apiBeforeDeleteHooks = append(apiBeforeDeleteHooks, apiHook)
		apiBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		apiAfterDeleteMu.Lock()
		apiAfterDeleteHooks = append(apiAfterDeleteHooks, apiHook)
		apiAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		apiBeforeUpsertMu.Lock()
		apiBeforeUpsertHooks = append(apiBeforeUpsertHooks, apiHook)
		apiBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		apiAfterUpsertMu.Lock()
		apiAfterUpsertHooks = append(apiAfterUpsertHooks, apiHook)
		apiAfterUpsertMu.Unlock()
	}
}

// OneG returns a single api record from the query using the global executor.
func (q apiQuery) OneG() (*Api, error) {
	return q.One(boil.GetDB())
}

// One returns a single api record from the query.
func (q apiQuery) One(exec boil.Executor) (*Api, error) {
	o := &Api{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for apis")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all Api records from the query using the global executor.
func (q apiQuery) AllG() (ApiSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all Api records from the query.
func (q apiQuery) All(exec boil.Executor) (ApiSlice, error) {
	var o []*Api

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to Api slice")
	}

	if len(apiAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all Api records in the query using the global executor
func (q apiQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all Api records in the query.
func (q apiQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count apis rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q apiQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q apiQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if apis exists")
	}

	return count > 0, nil
}

// Apis retrieves all the records using an executor.
func Apis(mods ...qm.QueryMod) apiQuery {
	mods = append(mods, qm.From("\"apis\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"apis\".*"})
	}

	return apiQuery{q}
}

// FindApiG retrieves a single record by ID.
func FindApiG(iD int64, selectCols ...string) (*Api, error) {
	return FindApi(boil.GetDB(), iD, selectCols...)
}

// FindApi retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindApi(exec boil.Executor, iD int64, selectCols ...string) (*Api, error) {
	apiObj := &Api{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"apis\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, apiObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from apis")
	}

	if err = apiObj.doAfterSelectHooks(exec); err != nil {
		return apiObj, err
	}

	return apiObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *Api) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *Api) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no apis provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	apiInsertCacheMut.RLock()
	cache, cached := apiInsertCache[key]
	apiInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			apiAllColumns,
			apiColumnsWithDefault,
			apiColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(apiType, apiMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(apiType, apiMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"apis\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"apis\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into apis")
	}

	if !cached {
		apiInsertCacheMut.Lock()
		apiInsertCache[key] = cache
		apiInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single Api record using the global executor.
// See Update for more documentation.
func (o *Api) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the Api.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *Api) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	apiUpdateCacheMut.RLock()
	cache, cached := apiUpdateCache[key]
	apiUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			apiAllColumns,
			apiPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update apis, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"apis\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, apiPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(apiType, apiMapping, append(wl, apiPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update apis row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for apis")
	}

	if !cached {
		apiUpdateCacheMut.Lock()
		apiUpdateCache[key] = cache
		apiUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q apiQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q apiQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for apis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for apis")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o ApiSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o ApiSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"apis\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, apiPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in api slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all api")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *Api) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *Api) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no apis provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(apiColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	apiUpsertCacheMut.RLock()
	cache, cached := apiUpsertCache[key]
	apiUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			apiAllColumns,
			apiColumnsWithDefault,
			apiColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			apiAllColumns,
			apiPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert apis, could not build update column list")
		}

		ret := strmangle.SetComplement(apiAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(apiPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert apis, could not build conflict column list")
			}

			conflict = make([]string, len(apiPrimaryKeyColumns))
			copy(conflict, apiPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"apis\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(apiType, apiMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(apiType, apiMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert apis")
	}

	if !cached {
		apiUpsertCacheMut.Lock()
		apiUpsertCache[key] = cache
		apiUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single Api record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *Api) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single Api record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *Api) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no Api provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), apiPrimaryKeyMapping)
	sql := "DELETE FROM \"apis\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from apis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for apis")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q apiQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q apiQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no apiQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from apis")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for apis")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o ApiSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o ApiSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(apiBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"apis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from api slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for apis")
	}

	if len(apiAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *Api) ReloadG() error {
	if o == nil {
		return errors.New("orm: no Api provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *Api) Reload(exec boil.Executor) error {
	ret, err := FindApi(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApiSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty ApiSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *ApiSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := ApiSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), apiPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"apis\".* FROM \"apis\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, apiPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in ApiSlice")
	}

	*o = slice

	return nil
}

// ApiExistsG checks if the Api row exists.
func ApiExistsG(iD int64) (bool, error) {
	return ApiExists(boil.GetDB(), iD)
}

// ApiExists checks if the Api row exists.
func ApiExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"apis\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if apis exists")
	}

	return exists, nil
}

// Exists checks if the Api row exists.
func (o *Api) Exists(exec boil.Executor) (bool, error) {
	return ApiExists(exec, o.ID)
}
