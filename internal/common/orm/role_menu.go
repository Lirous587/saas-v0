// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// RoleMenu is an object representing the database table.
type RoleMenu struct {
	ID     int64 `boil:"id" json:"id" toml:"id" yaml:"id"`
	RoleID int64 `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`
	MenuID int64 `boil:"menu_id" json:"menu_id" toml:"menu_id" yaml:"menu_id"`

	R *roleMenuR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L roleMenuL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var RoleMenuColumns = struct {
	ID     string
	RoleID string
	MenuID string
}{
	ID:     "id",
	RoleID: "role_id",
	MenuID: "menu_id",
}

var RoleMenuTableColumns = struct {
	ID     string
	RoleID string
	MenuID string
}{
	ID:     "role_menu.id",
	RoleID: "role_menu.role_id",
	MenuID: "role_menu.menu_id",
}

// Generated where

var RoleMenuWhere = struct {
	ID     whereHelperint64
	RoleID whereHelperint64
	MenuID whereHelperint64
}{
	ID:     whereHelperint64{field: "\"role_menu\".\"id\""},
	RoleID: whereHelperint64{field: "\"role_menu\".\"role_id\""},
	MenuID: whereHelperint64{field: "\"role_menu\".\"menu_id\""},
}

// RoleMenuRels is where relationship names are stored.
var RoleMenuRels = struct {
	Menu string
	Role string
}{
	Menu: "Menu",
	Role: "Role",
}

// roleMenuR is where relationships are stored.
type roleMenuR struct {
	Menu *Menu `boil:"Menu" json:"Menu" toml:"Menu" yaml:"Menu"`
	Role *Role `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
}

// NewStruct creates a new relationship struct
func (*roleMenuR) NewStruct() *roleMenuR {
	return &roleMenuR{}
}

func (o *RoleMenu) GetMenu() *Menu {
	if o == nil {
		return nil
	}

	return o.R.GetMenu()
}

func (r *roleMenuR) GetMenu() *Menu {
	if r == nil {
		return nil
	}

	return r.Menu
}

func (o *RoleMenu) GetRole() *Role {
	if o == nil {
		return nil
	}

	return o.R.GetRole()
}

func (r *roleMenuR) GetRole() *Role {
	if r == nil {
		return nil
	}

	return r.Role
}

// roleMenuL is where Load methods for each relationship are stored.
type roleMenuL struct{}

var (
	roleMenuAllColumns            = []string{"id", "role_id", "menu_id"}
	roleMenuColumnsWithoutDefault = []string{"role_id", "menu_id"}
	roleMenuColumnsWithDefault    = []string{"id"}
	roleMenuPrimaryKeyColumns     = []string{"id"}
	roleMenuGeneratedColumns      = []string{}
)

type (
	// RoleMenuSlice is an alias for a slice of pointers to RoleMenu.
	// This should almost always be used instead of []RoleMenu.
	RoleMenuSlice []*RoleMenu
	// RoleMenuHook is the signature for custom RoleMenu hook methods
	RoleMenuHook func(boil.Executor, *RoleMenu) error

	roleMenuQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	roleMenuType                 = reflect.TypeOf(&RoleMenu{})
	roleMenuMapping              = queries.MakeStructMapping(roleMenuType)
	roleMenuPrimaryKeyMapping, _ = queries.BindMapping(roleMenuType, roleMenuMapping, roleMenuPrimaryKeyColumns)
	roleMenuInsertCacheMut       sync.RWMutex
	roleMenuInsertCache          = make(map[string]insertCache)
	roleMenuUpdateCacheMut       sync.RWMutex
	roleMenuUpdateCache          = make(map[string]updateCache)
	roleMenuUpsertCacheMut       sync.RWMutex
	roleMenuUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var roleMenuAfterSelectMu sync.Mutex
var roleMenuAfterSelectHooks []RoleMenuHook

var roleMenuBeforeInsertMu sync.Mutex
var roleMenuBeforeInsertHooks []RoleMenuHook
var roleMenuAfterInsertMu sync.Mutex
var roleMenuAfterInsertHooks []RoleMenuHook

var roleMenuBeforeUpdateMu sync.Mutex
var roleMenuBeforeUpdateHooks []RoleMenuHook
var roleMenuAfterUpdateMu sync.Mutex
var roleMenuAfterUpdateHooks []RoleMenuHook

var roleMenuBeforeDeleteMu sync.Mutex
var roleMenuBeforeDeleteHooks []RoleMenuHook
var roleMenuAfterDeleteMu sync.Mutex
var roleMenuAfterDeleteHooks []RoleMenuHook

var roleMenuBeforeUpsertMu sync.Mutex
var roleMenuBeforeUpsertHooks []RoleMenuHook
var roleMenuAfterUpsertMu sync.Mutex
var roleMenuAfterUpsertHooks []RoleMenuHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *RoleMenu) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *RoleMenu) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *RoleMenu) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *RoleMenu) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *RoleMenu) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *RoleMenu) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *RoleMenu) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *RoleMenu) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *RoleMenu) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range roleMenuAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddRoleMenuHook registers your hook function for all future operations.
func AddRoleMenuHook(hookPoint boil.HookPoint, roleMenuHook RoleMenuHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		roleMenuAfterSelectMu.Lock()
		roleMenuAfterSelectHooks = append(roleMenuAfterSelectHooks, roleMenuHook)
		roleMenuAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		roleMenuBeforeInsertMu.Lock()
		roleMenuBeforeInsertHooks = append(roleMenuBeforeInsertHooks, roleMenuHook)
		roleMenuBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		roleMenuAfterInsertMu.Lock()
		roleMenuAfterInsertHooks = append(roleMenuAfterInsertHooks, roleMenuHook)
		roleMenuAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		roleMenuBeforeUpdateMu.Lock()
		roleMenuBeforeUpdateHooks = append(roleMenuBeforeUpdateHooks, roleMenuHook)
		roleMenuBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		roleMenuAfterUpdateMu.Lock()
		roleMenuAfterUpdateHooks = append(roleMenuAfterUpdateHooks, roleMenuHook)
		roleMenuAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		roleMenuBeforeDeleteMu.Lock()
		roleMenuBeforeDeleteHooks = append(roleMenuBeforeDeleteHooks, roleMenuHook)
		roleMenuBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		roleMenuAfterDeleteMu.Lock()
		roleMenuAfterDeleteHooks = append(roleMenuAfterDeleteHooks, roleMenuHook)
		roleMenuAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		roleMenuBeforeUpsertMu.Lock()
		roleMenuBeforeUpsertHooks = append(roleMenuBeforeUpsertHooks, roleMenuHook)
		roleMenuBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		roleMenuAfterUpsertMu.Lock()
		roleMenuAfterUpsertHooks = append(roleMenuAfterUpsertHooks, roleMenuHook)
		roleMenuAfterUpsertMu.Unlock()
	}
}

// OneG returns a single roleMenu record from the query using the global executor.
func (q roleMenuQuery) OneG() (*RoleMenu, error) {
	return q.One(boil.GetDB())
}

// One returns a single roleMenu record from the query.
func (q roleMenuQuery) One(exec boil.Executor) (*RoleMenu, error) {
	o := &RoleMenu{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for role_menu")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all RoleMenu records from the query using the global executor.
func (q roleMenuQuery) AllG() (RoleMenuSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all RoleMenu records from the query.
func (q roleMenuQuery) All(exec boil.Executor) (RoleMenuSlice, error) {
	var o []*RoleMenu

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to RoleMenu slice")
	}

	if len(roleMenuAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all RoleMenu records in the query using the global executor
func (q roleMenuQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all RoleMenu records in the query.
func (q roleMenuQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count role_menu rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q roleMenuQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q roleMenuQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if role_menu exists")
	}

	return count > 0, nil
}

// Menu pointed to by the foreign key.
func (o *RoleMenu) Menu(mods ...qm.QueryMod) menuQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MenuID),
	}

	queryMods = append(queryMods, mods...)

	return Menus(queryMods...)
}

// Role pointed to by the foreign key.
func (o *RoleMenu) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// LoadMenu allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuL) LoadMenu(e boil.Executor, singular bool, maybeRoleMenu interface{}, mods queries.Applicator) error {
	var slice []*RoleMenu
	var object *RoleMenu

	if singular {
		var ok bool
		object, ok = maybeRoleMenu.(*RoleMenu)
		if !ok {
			object = new(RoleMenu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleMenu))
			}
		}
	} else {
		s, ok := maybeRoleMenu.(*[]*RoleMenu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleMenu))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleMenuR{}
		}
		args[object.MenuID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuR{}
			}

			args[obj.MenuID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`menus`),
		qm.WhereIn(`menus.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Menu")
	}

	var resultSlice []*Menu
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Menu")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for menus")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for menus")
	}

	if len(menuAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Menu = foreign
		if foreign.R == nil {
			foreign.R = &menuR{}
		}
		foreign.R.RoleMenus = append(foreign.R.RoleMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MenuID == foreign.ID {
				local.R.Menu = foreign
				if foreign.R == nil {
					foreign.R = &menuR{}
				}
				foreign.R.RoleMenus = append(foreign.R.RoleMenus, local)
				break
			}
		}
	}

	return nil
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (roleMenuL) LoadRole(e boil.Executor, singular bool, maybeRoleMenu interface{}, mods queries.Applicator) error {
	var slice []*RoleMenu
	var object *RoleMenu

	if singular {
		var ok bool
		object, ok = maybeRoleMenu.(*RoleMenu)
		if !ok {
			object = new(RoleMenu)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeRoleMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeRoleMenu))
			}
		}
	} else {
		s, ok := maybeRoleMenu.(*[]*RoleMenu)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeRoleMenu)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeRoleMenu))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &roleMenuR{}
		}
		args[object.RoleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &roleMenuR{}
			}

			args[obj.RoleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.RoleMenus = append(foreign.R.RoleMenus, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.RoleMenus = append(foreign.R.RoleMenus, local)
				break
			}
		}
	}

	return nil
}

// SetMenuG of the roleMenu to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.RoleMenus.
// Uses the global database handle.
func (o *RoleMenu) SetMenuG(insert bool, related *Menu) error {
	return o.SetMenu(boil.GetDB(), insert, related)
}

// SetMenu of the roleMenu to the related item.
// Sets o.R.Menu to related.
// Adds o to related.R.RoleMenus.
func (o *RoleMenu) SetMenu(exec boil.Executor, insert bool, related *Menu) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"menu_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MenuID = related.ID
	if o.R == nil {
		o.R = &roleMenuR{
			Menu: related,
		}
	} else {
		o.R.Menu = related
	}

	if related.R == nil {
		related.R = &menuR{
			RoleMenus: RoleMenuSlice{o},
		}
	} else {
		related.R.RoleMenus = append(related.R.RoleMenus, o)
	}

	return nil
}

// SetRoleG of the roleMenu to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleMenus.
// Uses the global database handle.
func (o *RoleMenu) SetRoleG(insert bool, related *Role) error {
	return o.SetRole(boil.GetDB(), insert, related)
}

// SetRole of the roleMenu to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.RoleMenus.
func (o *RoleMenu) SetRole(exec boil.Executor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"role_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, roleMenuPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &roleMenuR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			RoleMenus: RoleMenuSlice{o},
		}
	} else {
		related.R.RoleMenus = append(related.R.RoleMenus, o)
	}

	return nil
}

// RoleMenus retrieves all the records using an executor.
func RoleMenus(mods ...qm.QueryMod) roleMenuQuery {
	mods = append(mods, qm.From("\"role_menu\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"role_menu\".*"})
	}

	return roleMenuQuery{q}
}

// FindRoleMenuG retrieves a single record by ID.
func FindRoleMenuG(iD int64, selectCols ...string) (*RoleMenu, error) {
	return FindRoleMenu(boil.GetDB(), iD, selectCols...)
}

// FindRoleMenu retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindRoleMenu(exec boil.Executor, iD int64, selectCols ...string) (*RoleMenu, error) {
	roleMenuObj := &RoleMenu{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"role_menu\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(nil, exec, roleMenuObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from role_menu")
	}

	if err = roleMenuObj.doAfterSelectHooks(exec); err != nil {
		return roleMenuObj, err
	}

	return roleMenuObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *RoleMenu) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *RoleMenu) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no role_menu provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	roleMenuInsertCacheMut.RLock()
	cache, cached := roleMenuInsertCache[key]
	roleMenuInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			roleMenuAllColumns,
			roleMenuColumnsWithDefault,
			roleMenuColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"role_menu\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"role_menu\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into role_menu")
	}

	if !cached {
		roleMenuInsertCacheMut.Lock()
		roleMenuInsertCache[key] = cache
		roleMenuInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single RoleMenu record using the global executor.
// See Update for more documentation.
func (o *RoleMenu) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the RoleMenu.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *RoleMenu) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	roleMenuUpdateCacheMut.RLock()
	cache, cached := roleMenuUpdateCache[key]
	roleMenuUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			roleMenuAllColumns,
			roleMenuPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update role_menu, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"role_menu\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, roleMenuPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, append(wl, roleMenuPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update role_menu row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for role_menu")
	}

	if !cached {
		roleMenuUpdateCacheMut.Lock()
		roleMenuUpdateCache[key] = cache
		roleMenuUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q roleMenuQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q roleMenuQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for role_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for role_menu")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o RoleMenuSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o RoleMenuSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"role_menu\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, roleMenuPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in roleMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all roleMenu")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *RoleMenu) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *RoleMenu) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no role_menu provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(roleMenuColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	roleMenuUpsertCacheMut.RLock()
	cache, cached := roleMenuUpsertCache[key]
	roleMenuUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			roleMenuAllColumns,
			roleMenuColumnsWithDefault,
			roleMenuColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			roleMenuAllColumns,
			roleMenuPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert role_menu, could not build update column list")
		}

		ret := strmangle.SetComplement(roleMenuAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(roleMenuPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert role_menu, could not build conflict column list")
			}

			conflict = make([]string, len(roleMenuPrimaryKeyColumns))
			copy(conflict, roleMenuPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"role_menu\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(roleMenuType, roleMenuMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert role_menu")
	}

	if !cached {
		roleMenuUpsertCacheMut.Lock()
		roleMenuUpsertCache[key] = cache
		roleMenuUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single RoleMenu record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *RoleMenu) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single RoleMenu record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *RoleMenu) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no RoleMenu provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), roleMenuPrimaryKeyMapping)
	sql := "DELETE FROM \"role_menu\" WHERE \"id\"=$1"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from role_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for role_menu")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q roleMenuQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q roleMenuQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no roleMenuQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from role_menu")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for role_menu")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o RoleMenuSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o RoleMenuSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(roleMenuBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"role_menu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from roleMenu slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for role_menu")
	}

	if len(roleMenuAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *RoleMenu) ReloadG() error {
	if o == nil {
		return errors.New("orm: no RoleMenu provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *RoleMenu) Reload(exec boil.Executor) error {
	ret, err := FindRoleMenu(exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty RoleMenuSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *RoleMenuSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := RoleMenuSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), roleMenuPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"role_menu\".* FROM \"role_menu\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, roleMenuPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in RoleMenuSlice")
	}

	*o = slice

	return nil
}

// RoleMenuExistsG checks if the RoleMenu row exists.
func RoleMenuExistsG(iD int64) (bool, error) {
	return RoleMenuExists(boil.GetDB(), iD)
}

// RoleMenuExists checks if the RoleMenu row exists.
func RoleMenuExists(exec boil.Executor, iD int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"role_menu\" where \"id\"=$1 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, iD)
	}
	row := exec.QueryRow(sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if role_menu exists")
	}

	return exists, nil
}

// Exists checks if the RoleMenu row exists.
func (o *RoleMenu) Exists(exec boil.Executor) (bool, error) {
	return RoleMenuExists(exec, o.ID)
}
