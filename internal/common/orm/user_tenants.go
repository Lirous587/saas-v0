// Code generated by SQLBoiler 4.19.5 (https://github.com/aarondl/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package orm

import (
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/aarondl/sqlboiler/v4/boil"
	"github.com/aarondl/sqlboiler/v4/queries"
	"github.com/aarondl/sqlboiler/v4/queries/qm"
	"github.com/aarondl/sqlboiler/v4/queries/qmhelper"
	"github.com/aarondl/strmangle"
	"github.com/friendsofgo/errors"
)

// UserTenant is an object representing the database table.
type UserTenant struct {
	UserID   int64 `boil:"user_id" json:"user_id" toml:"user_id" yaml:"user_id"`
	TenantID int64 `boil:"tenant_id" json:"tenant_id" toml:"tenant_id" yaml:"tenant_id"`
	RoleID   int64 `boil:"role_id" json:"role_id" toml:"role_id" yaml:"role_id"`

	R *userTenantR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L userTenantL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var UserTenantColumns = struct {
	UserID   string
	TenantID string
	RoleID   string
}{
	UserID:   "user_id",
	TenantID: "tenant_id",
	RoleID:   "role_id",
}

var UserTenantTableColumns = struct {
	UserID   string
	TenantID string
	RoleID   string
}{
	UserID:   "user_tenants.user_id",
	TenantID: "user_tenants.tenant_id",
	RoleID:   "user_tenants.role_id",
}

// Generated where

var UserTenantWhere = struct {
	UserID   whereHelperint64
	TenantID whereHelperint64
	RoleID   whereHelperint64
}{
	UserID:   whereHelperint64{field: "\"user_tenants\".\"user_id\""},
	TenantID: whereHelperint64{field: "\"user_tenants\".\"tenant_id\""},
	RoleID:   whereHelperint64{field: "\"user_tenants\".\"role_id\""},
}

// UserTenantRels is where relationship names are stored.
var UserTenantRels = struct {
	Role   string
	Tenant string
	User   string
}{
	Role:   "Role",
	Tenant: "Tenant",
	User:   "User",
}

// userTenantR is where relationships are stored.
type userTenantR struct {
	Role   *Role   `boil:"Role" json:"Role" toml:"Role" yaml:"Role"`
	Tenant *Tenant `boil:"Tenant" json:"Tenant" toml:"Tenant" yaml:"Tenant"`
	User   *User   `boil:"User" json:"User" toml:"User" yaml:"User"`
}

// NewStruct creates a new relationship struct
func (*userTenantR) NewStruct() *userTenantR {
	return &userTenantR{}
}

func (o *UserTenant) GetRole() *Role {
	if o == nil {
		return nil
	}

	return o.R.GetRole()
}

func (r *userTenantR) GetRole() *Role {
	if r == nil {
		return nil
	}

	return r.Role
}

func (o *UserTenant) GetTenant() *Tenant {
	if o == nil {
		return nil
	}

	return o.R.GetTenant()
}

func (r *userTenantR) GetTenant() *Tenant {
	if r == nil {
		return nil
	}

	return r.Tenant
}

func (o *UserTenant) GetUser() *User {
	if o == nil {
		return nil
	}

	return o.R.GetUser()
}

func (r *userTenantR) GetUser() *User {
	if r == nil {
		return nil
	}

	return r.User
}

// userTenantL is where Load methods for each relationship are stored.
type userTenantL struct{}

var (
	userTenantAllColumns            = []string{"user_id", "tenant_id", "role_id"}
	userTenantColumnsWithoutDefault = []string{"user_id", "tenant_id", "role_id"}
	userTenantColumnsWithDefault    = []string{}
	userTenantPrimaryKeyColumns     = []string{"user_id", "tenant_id"}
	userTenantGeneratedColumns      = []string{}
)

type (
	// UserTenantSlice is an alias for a slice of pointers to UserTenant.
	// This should almost always be used instead of []UserTenant.
	UserTenantSlice []*UserTenant
	// UserTenantHook is the signature for custom UserTenant hook methods
	UserTenantHook func(boil.Executor, *UserTenant) error

	userTenantQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	userTenantType                 = reflect.TypeOf(&UserTenant{})
	userTenantMapping              = queries.MakeStructMapping(userTenantType)
	userTenantPrimaryKeyMapping, _ = queries.BindMapping(userTenantType, userTenantMapping, userTenantPrimaryKeyColumns)
	userTenantInsertCacheMut       sync.RWMutex
	userTenantInsertCache          = make(map[string]insertCache)
	userTenantUpdateCacheMut       sync.RWMutex
	userTenantUpdateCache          = make(map[string]updateCache)
	userTenantUpsertCacheMut       sync.RWMutex
	userTenantUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var userTenantAfterSelectMu sync.Mutex
var userTenantAfterSelectHooks []UserTenantHook

var userTenantBeforeInsertMu sync.Mutex
var userTenantBeforeInsertHooks []UserTenantHook
var userTenantAfterInsertMu sync.Mutex
var userTenantAfterInsertHooks []UserTenantHook

var userTenantBeforeUpdateMu sync.Mutex
var userTenantBeforeUpdateHooks []UserTenantHook
var userTenantAfterUpdateMu sync.Mutex
var userTenantAfterUpdateHooks []UserTenantHook

var userTenantBeforeDeleteMu sync.Mutex
var userTenantBeforeDeleteHooks []UserTenantHook
var userTenantAfterDeleteMu sync.Mutex
var userTenantAfterDeleteHooks []UserTenantHook

var userTenantBeforeUpsertMu sync.Mutex
var userTenantBeforeUpsertHooks []UserTenantHook
var userTenantAfterUpsertMu sync.Mutex
var userTenantAfterUpsertHooks []UserTenantHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *UserTenant) doAfterSelectHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantAfterSelectHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *UserTenant) doBeforeInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantBeforeInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *UserTenant) doAfterInsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantAfterInsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *UserTenant) doBeforeUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantBeforeUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *UserTenant) doAfterUpdateHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantAfterUpdateHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *UserTenant) doBeforeDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantBeforeDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *UserTenant) doAfterDeleteHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantAfterDeleteHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *UserTenant) doBeforeUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantBeforeUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *UserTenant) doAfterUpsertHooks(exec boil.Executor) (err error) {
	for _, hook := range userTenantAfterUpsertHooks {
		if err := hook(exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddUserTenantHook registers your hook function for all future operations.
func AddUserTenantHook(hookPoint boil.HookPoint, userTenantHook UserTenantHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		userTenantAfterSelectMu.Lock()
		userTenantAfterSelectHooks = append(userTenantAfterSelectHooks, userTenantHook)
		userTenantAfterSelectMu.Unlock()
	case boil.BeforeInsertHook:
		userTenantBeforeInsertMu.Lock()
		userTenantBeforeInsertHooks = append(userTenantBeforeInsertHooks, userTenantHook)
		userTenantBeforeInsertMu.Unlock()
	case boil.AfterInsertHook:
		userTenantAfterInsertMu.Lock()
		userTenantAfterInsertHooks = append(userTenantAfterInsertHooks, userTenantHook)
		userTenantAfterInsertMu.Unlock()
	case boil.BeforeUpdateHook:
		userTenantBeforeUpdateMu.Lock()
		userTenantBeforeUpdateHooks = append(userTenantBeforeUpdateHooks, userTenantHook)
		userTenantBeforeUpdateMu.Unlock()
	case boil.AfterUpdateHook:
		userTenantAfterUpdateMu.Lock()
		userTenantAfterUpdateHooks = append(userTenantAfterUpdateHooks, userTenantHook)
		userTenantAfterUpdateMu.Unlock()
	case boil.BeforeDeleteHook:
		userTenantBeforeDeleteMu.Lock()
		userTenantBeforeDeleteHooks = append(userTenantBeforeDeleteHooks, userTenantHook)
		userTenantBeforeDeleteMu.Unlock()
	case boil.AfterDeleteHook:
		userTenantAfterDeleteMu.Lock()
		userTenantAfterDeleteHooks = append(userTenantAfterDeleteHooks, userTenantHook)
		userTenantAfterDeleteMu.Unlock()
	case boil.BeforeUpsertHook:
		userTenantBeforeUpsertMu.Lock()
		userTenantBeforeUpsertHooks = append(userTenantBeforeUpsertHooks, userTenantHook)
		userTenantBeforeUpsertMu.Unlock()
	case boil.AfterUpsertHook:
		userTenantAfterUpsertMu.Lock()
		userTenantAfterUpsertHooks = append(userTenantAfterUpsertHooks, userTenantHook)
		userTenantAfterUpsertMu.Unlock()
	}
}

// OneG returns a single userTenant record from the query using the global executor.
func (q userTenantQuery) OneG() (*UserTenant, error) {
	return q.One(boil.GetDB())
}

// One returns a single userTenant record from the query.
func (q userTenantQuery) One(exec boil.Executor) (*UserTenant, error) {
	o := &UserTenant{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(nil, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: failed to execute a one query for user_tenants")
	}

	if err := o.doAfterSelectHooks(exec); err != nil {
		return o, err
	}

	return o, nil
}

// AllG returns all UserTenant records from the query using the global executor.
func (q userTenantQuery) AllG() (UserTenantSlice, error) {
	return q.All(boil.GetDB())
}

// All returns all UserTenant records from the query.
func (q userTenantQuery) All(exec boil.Executor) (UserTenantSlice, error) {
	var o []*UserTenant

	err := q.Bind(nil, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "orm: failed to assign all query results to UserTenant slice")
	}

	if len(userTenantAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// CountG returns the count of all UserTenant records in the query using the global executor
func (q userTenantQuery) CountG() (int64, error) {
	return q.Count(boil.GetDB())
}

// Count returns the count of all UserTenant records in the query.
func (q userTenantQuery) Count(exec boil.Executor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to count user_tenants rows")
	}

	return count, nil
}

// ExistsG checks if the row exists in the table using the global executor.
func (q userTenantQuery) ExistsG() (bool, error) {
	return q.Exists(boil.GetDB())
}

// Exists checks if the row exists in the table.
func (q userTenantQuery) Exists(exec boil.Executor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRow(exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "orm: failed to check if user_tenants exists")
	}

	return count > 0, nil
}

// Role pointed to by the foreign key.
func (o *UserTenant) Role(mods ...qm.QueryMod) roleQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.RoleID),
	}

	queryMods = append(queryMods, mods...)

	return Roles(queryMods...)
}

// Tenant pointed to by the foreign key.
func (o *UserTenant) Tenant(mods ...qm.QueryMod) tenantQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TenantID),
	}

	queryMods = append(queryMods, mods...)

	return Tenants(queryMods...)
}

// User pointed to by the foreign key.
func (o *UserTenant) User(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.UserID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadRole allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTenantL) LoadRole(e boil.Executor, singular bool, maybeUserTenant interface{}, mods queries.Applicator) error {
	var slice []*UserTenant
	var object *UserTenant

	if singular {
		var ok bool
		object, ok = maybeUserTenant.(*UserTenant)
		if !ok {
			object = new(UserTenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTenant))
			}
		}
	} else {
		s, ok := maybeUserTenant.(*[]*UserTenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userTenantR{}
		}
		args[object.RoleID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTenantR{}
			}

			args[obj.RoleID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`roles`),
		qm.WhereIn(`roles.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Role")
	}

	var resultSlice []*Role
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Role")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for roles")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for roles")
	}

	if len(roleAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Role = foreign
		if foreign.R == nil {
			foreign.R = &roleR{}
		}
		foreign.R.UserTenants = append(foreign.R.UserTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.RoleID == foreign.ID {
				local.R.Role = foreign
				if foreign.R == nil {
					foreign.R = &roleR{}
				}
				foreign.R.UserTenants = append(foreign.R.UserTenants, local)
				break
			}
		}
	}

	return nil
}

// LoadTenant allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTenantL) LoadTenant(e boil.Executor, singular bool, maybeUserTenant interface{}, mods queries.Applicator) error {
	var slice []*UserTenant
	var object *UserTenant

	if singular {
		var ok bool
		object, ok = maybeUserTenant.(*UserTenant)
		if !ok {
			object = new(UserTenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTenant))
			}
		}
	} else {
		s, ok := maybeUserTenant.(*[]*UserTenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userTenantR{}
		}
		args[object.TenantID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTenantR{}
			}

			args[obj.TenantID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`tenants`),
		qm.WhereIn(`tenants.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Tenant")
	}

	var resultSlice []*Tenant
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Tenant")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for tenants")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for tenants")
	}

	if len(tenantAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Tenant = foreign
		if foreign.R == nil {
			foreign.R = &tenantR{}
		}
		foreign.R.UserTenants = append(foreign.R.UserTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.TenantID == foreign.ID {
				local.R.Tenant = foreign
				if foreign.R == nil {
					foreign.R = &tenantR{}
				}
				foreign.R.UserTenants = append(foreign.R.UserTenants, local)
				break
			}
		}
	}

	return nil
}

// LoadUser allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (userTenantL) LoadUser(e boil.Executor, singular bool, maybeUserTenant interface{}, mods queries.Applicator) error {
	var slice []*UserTenant
	var object *UserTenant

	if singular {
		var ok bool
		object, ok = maybeUserTenant.(*UserTenant)
		if !ok {
			object = new(UserTenant)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeUserTenant))
			}
		}
	} else {
		s, ok := maybeUserTenant.(*[]*UserTenant)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeUserTenant)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeUserTenant))
			}
		}
	}

	args := make(map[interface{}]struct{})
	if singular {
		if object.R == nil {
			object.R = &userTenantR{}
		}
		args[object.UserID] = struct{}{}

	} else {
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &userTenantR{}
			}

			args[obj.UserID] = struct{}{}

		}
	}

	if len(args) == 0 {
		return nil
	}

	argsSlice := make([]interface{}, len(args))
	i := 0
	for arg := range args {
		argsSlice[i] = arg
		i++
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, argsSlice...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.Query(e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.User = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.UserTenants = append(foreign.R.UserTenants, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.UserID == foreign.ID {
				local.R.User = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.UserTenants = append(foreign.R.UserTenants, local)
				break
			}
		}
	}

	return nil
}

// SetRoleG of the userTenant to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.UserTenants.
// Uses the global database handle.
func (o *UserTenant) SetRoleG(insert bool, related *Role) error {
	return o.SetRole(boil.GetDB(), insert, related)
}

// SetRole of the userTenant to the related item.
// Sets o.R.Role to related.
// Adds o to related.R.UserTenants.
func (o *UserTenant) SetRole(exec boil.Executor, insert bool, related *Role) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"role_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.RoleID = related.ID
	if o.R == nil {
		o.R = &userTenantR{
			Role: related,
		}
	} else {
		o.R.Role = related
	}

	if related.R == nil {
		related.R = &roleR{
			UserTenants: UserTenantSlice{o},
		}
	} else {
		related.R.UserTenants = append(related.R.UserTenants, o)
	}

	return nil
}

// SetTenantG of the userTenant to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.UserTenants.
// Uses the global database handle.
func (o *UserTenant) SetTenantG(insert bool, related *Tenant) error {
	return o.SetTenant(boil.GetDB(), insert, related)
}

// SetTenant of the userTenant to the related item.
// Sets o.R.Tenant to related.
// Adds o to related.R.UserTenants.
func (o *UserTenant) SetTenant(exec boil.Executor, insert bool, related *Tenant) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"tenant_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.TenantID = related.ID
	if o.R == nil {
		o.R = &userTenantR{
			Tenant: related,
		}
	} else {
		o.R.Tenant = related
	}

	if related.R == nil {
		related.R = &tenantR{
			UserTenants: UserTenantSlice{o},
		}
	} else {
		related.R.UserTenants = append(related.R.UserTenants, o)
	}

	return nil
}

// SetUserG of the userTenant to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTenants.
// Uses the global database handle.
func (o *UserTenant) SetUserG(insert bool, related *User) error {
	return o.SetUser(boil.GetDB(), insert, related)
}

// SetUser of the userTenant to the related item.
// Sets o.R.User to related.
// Adds o to related.R.UserTenants.
func (o *UserTenant) SetUser(exec boil.Executor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"user_tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"user_id"}),
		strmangle.WhereClause("\"", "\"", 2, userTenantPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.UserID, o.TenantID}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, updateQuery)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	if _, err = exec.Exec(updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.UserID = related.ID
	if o.R == nil {
		o.R = &userTenantR{
			User: related,
		}
	} else {
		o.R.User = related
	}

	if related.R == nil {
		related.R = &userR{
			UserTenants: UserTenantSlice{o},
		}
	} else {
		related.R.UserTenants = append(related.R.UserTenants, o)
	}

	return nil
}

// UserTenants retrieves all the records using an executor.
func UserTenants(mods ...qm.QueryMod) userTenantQuery {
	mods = append(mods, qm.From("\"user_tenants\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"user_tenants\".*"})
	}

	return userTenantQuery{q}
}

// FindUserTenantG retrieves a single record by ID.
func FindUserTenantG(userID int64, tenantID int64, selectCols ...string) (*UserTenant, error) {
	return FindUserTenant(boil.GetDB(), userID, tenantID, selectCols...)
}

// FindUserTenant retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindUserTenant(exec boil.Executor, userID int64, tenantID int64, selectCols ...string) (*UserTenant, error) {
	userTenantObj := &UserTenant{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"user_tenants\" where \"user_id\"=$1 AND \"tenant_id\"=$2", sel,
	)

	q := queries.Raw(query, userID, tenantID)

	err := q.Bind(nil, exec, userTenantObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "orm: unable to select from user_tenants")
	}

	if err = userTenantObj.doAfterSelectHooks(exec); err != nil {
		return userTenantObj, err
	}

	return userTenantObj, nil
}

// InsertG a single record. See Insert for whitelist behavior description.
func (o *UserTenant) InsertG(columns boil.Columns) error {
	return o.Insert(boil.GetDB(), columns)
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *UserTenant) Insert(exec boil.Executor, columns boil.Columns) error {
	if o == nil {
		return errors.New("orm: no user_tenants provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTenantColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	userTenantInsertCacheMut.RLock()
	cache, cached := userTenantInsertCache[key]
	userTenantInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			userTenantAllColumns,
			userTenantColumnsWithDefault,
			userTenantColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(userTenantType, userTenantMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(userTenantType, userTenantMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"user_tenants\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"user_tenants\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "orm: unable to insert into user_tenants")
	}

	if !cached {
		userTenantInsertCacheMut.Lock()
		userTenantInsertCache[key] = cache
		userTenantInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(exec)
}

// UpdateG a single UserTenant record using the global executor.
// See Update for more documentation.
func (o *UserTenant) UpdateG(columns boil.Columns) (int64, error) {
	return o.Update(boil.GetDB(), columns)
}

// Update uses an executor to update the UserTenant.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *UserTenant) Update(exec boil.Executor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	userTenantUpdateCacheMut.RLock()
	cache, cached := userTenantUpdateCache[key]
	userTenantUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			userTenantAllColumns,
			userTenantPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("orm: unable to update user_tenants, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"user_tenants\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, userTenantPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(userTenantType, userTenantMapping, append(wl, userTenantPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, values)
	}
	var result sql.Result
	result, err = exec.Exec(cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update user_tenants row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by update for user_tenants")
	}

	if !cached {
		userTenantUpdateCacheMut.Lock()
		userTenantUpdateCache[key] = cache
		userTenantUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(exec)
}

// UpdateAllG updates all rows with the specified column values.
func (q userTenantQuery) UpdateAllG(cols M) (int64, error) {
	return q.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values.
func (q userTenantQuery) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all for user_tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected for user_tenants")
	}

	return rowsAff, nil
}

// UpdateAllG updates all rows with the specified column values.
func (o UserTenantSlice) UpdateAllG(cols M) (int64, error) {
	return o.UpdateAll(boil.GetDB(), cols)
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o UserTenantSlice) UpdateAll(exec boil.Executor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("orm: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"user_tenants\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, userTenantPrimaryKeyColumns, len(o)))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to update all in userTenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to retrieve rows affected all in update all userTenant")
	}
	return rowsAff, nil
}

// UpsertG attempts an insert, and does an update or ignore on conflict.
func (o *UserTenant) UpsertG(updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	return o.Upsert(boil.GetDB(), updateOnConflict, conflictColumns, updateColumns, insertColumns, opts...)
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *UserTenant) Upsert(exec boil.Executor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns, opts ...UpsertOptionFunc) error {
	if o == nil {
		return errors.New("orm: no user_tenants provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(userTenantColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	userTenantUpsertCacheMut.RLock()
	cache, cached := userTenantUpsertCache[key]
	userTenantUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, _ := insertColumns.InsertColumnSet(
			userTenantAllColumns,
			userTenantColumnsWithDefault,
			userTenantColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			userTenantAllColumns,
			userTenantPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("orm: unable to upsert user_tenants, could not build update column list")
		}

		ret := strmangle.SetComplement(userTenantAllColumns, strmangle.SetIntersect(insert, update))

		conflict := conflictColumns
		if len(conflict) == 0 && updateOnConflict && len(update) != 0 {
			if len(userTenantPrimaryKeyColumns) == 0 {
				return errors.New("orm: unable to upsert user_tenants, could not build conflict column list")
			}

			conflict = make([]string, len(userTenantPrimaryKeyColumns))
			copy(conflict, userTenantPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"user_tenants\"", updateOnConflict, ret, update, conflict, insert, opts...)

		cache.valueMapping, err = queries.BindMapping(userTenantType, userTenantMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(userTenantType, userTenantMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, cache.query)
		fmt.Fprintln(boil.DebugWriter, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRow(cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.Exec(cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "orm: unable to upsert user_tenants")
	}

	if !cached {
		userTenantUpsertCacheMut.Lock()
		userTenantUpsertCache[key] = cache
		userTenantUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(exec)
}

// DeleteG deletes a single UserTenant record.
// DeleteG will match against the primary key column to find the record to delete.
func (o *UserTenant) DeleteG() (int64, error) {
	return o.Delete(boil.GetDB())
}

// Delete deletes a single UserTenant record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *UserTenant) Delete(exec boil.Executor) (int64, error) {
	if o == nil {
		return 0, errors.New("orm: no UserTenant provided for delete")
	}

	if err := o.doBeforeDeleteHooks(exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), userTenantPrimaryKeyMapping)
	sql := "DELETE FROM \"user_tenants\" WHERE \"user_id\"=$1 AND \"tenant_id\"=$2"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args...)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete from user_tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by delete for user_tenants")
	}

	if err := o.doAfterDeleteHooks(exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

func (q userTenantQuery) DeleteAllG() (int64, error) {
	return q.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all matching rows.
func (q userTenantQuery) DeleteAll(exec boil.Executor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("orm: no userTenantQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.Exec(exec)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from user_tenants")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for user_tenants")
	}

	return rowsAff, nil
}

// DeleteAllG deletes all rows in the slice.
func (o UserTenantSlice) DeleteAllG() (int64, error) {
	return o.DeleteAll(boil.GetDB())
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o UserTenantSlice) DeleteAll(exec boil.Executor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(userTenantBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"user_tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTenantPrimaryKeyColumns, len(o))

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, args)
	}
	result, err := exec.Exec(sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "orm: unable to delete all from userTenant slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "orm: failed to get rows affected by deleteall for user_tenants")
	}

	if len(userTenantAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// ReloadG refetches the object from the database using the primary keys.
func (o *UserTenant) ReloadG() error {
	if o == nil {
		return errors.New("orm: no UserTenant provided for reload")
	}

	return o.Reload(boil.GetDB())
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *UserTenant) Reload(exec boil.Executor) error {
	ret, err := FindUserTenant(exec, o.UserID, o.TenantID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAllG refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTenantSlice) ReloadAllG() error {
	if o == nil {
		return errors.New("orm: empty UserTenantSlice provided for reload all")
	}

	return o.ReloadAll(boil.GetDB())
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *UserTenantSlice) ReloadAll(exec boil.Executor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := UserTenantSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), userTenantPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"user_tenants\".* FROM \"user_tenants\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, userTenantPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(nil, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "orm: unable to reload all in UserTenantSlice")
	}

	*o = slice

	return nil
}

// UserTenantExistsG checks if the UserTenant row exists.
func UserTenantExistsG(userID int64, tenantID int64) (bool, error) {
	return UserTenantExists(boil.GetDB(), userID, tenantID)
}

// UserTenantExists checks if the UserTenant row exists.
func UserTenantExists(exec boil.Executor, userID int64, tenantID int64) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"user_tenants\" where \"user_id\"=$1 AND \"tenant_id\"=$2 limit 1)"

	if boil.DebugMode {
		fmt.Fprintln(boil.DebugWriter, sql)
		fmt.Fprintln(boil.DebugWriter, userID, tenantID)
	}
	row := exec.QueryRow(sql, userID, tenantID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "orm: unable to check if user_tenants exists")
	}

	return exists, nil
}

// Exists checks if the UserTenant row exists.
func (o *UserTenant) Exists(exec boil.Executor) (bool, error) {
	return UserTenantExists(exec, o.UserID, o.TenantID)
}
