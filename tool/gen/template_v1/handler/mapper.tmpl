package handler

import (
    "{{.Module}}/internal/{{.Domain}}/domain"
)

type {{.DomainTitle}}Response struct {
    ID          int64  `json:"id"`
    Title       string `json:"title"`
    Description string `json:"description,omitempty"`
    CreatedAt   int64  `json:"created_at"`
    UpdatedAt   int64  `json:"updated_at"`
}

func domain{{.DomainTitle}}ToResponse({{.Domain}} *domain.{{.DomainTitle}}) *{{.DomainTitle}}Response {
    if {{.Domain}} == nil {
        return nil
    }

    return &{{.DomainTitle}}Response{
        ID:          {{.Domain}}.ID,
        Title:       {{.Domain}}.Title,
        Description: {{.Domain}}.Description,
        CreatedAt:   mock.CreatedAt.Unix(),
        UpdatedAt:   mock.UpdatedAt.Unix(),
    }
}

func domain{{.DomainTitle}}sToResponse({{.Domain}}s []*domain.{{.DomainTitle}}) []*{{.DomainTitle}}Response {
    if len({{.Domain}}s) == 0 {
        return nil
    }

    ret := make([]*{{.DomainTitle}}Response, 0, len({{.Domain}}s))

    for _, {{.Domain}} := range {{.Domain}}s {
        if {{.Domain}} != nil {
            ret = append(ret, domain{{.DomainTitle}}ToResponse({{.Domain}}))
        }
    }
    return ret
}

type CreateRequest struct {
    Title       string  `json:"title" binding:"required,max=30"`
    Description string  `json:"description" binding:"max=60"`
}

type UpdateRequest struct {
    Title       string  `json:"title" binding:"required,max=30"`
    Description string  `json:"description" binding:"max=60"`
}

type ListRequest struct {
    Page     int    `form:"page,default=1" binding:"min=1"`
    PageSize int    `form:"page_size,default=5" binding:"min=5,max=20"`
    KeyWord  string `form:"keyword" binding:"max=20"`
}

type {{.DomainTitle}}ListResponse struct {
    Total int64                         `json:"total"`
    List  []*{{.DomainTitle}}Response   `json:"list"`
}

func domain{{.DomainTitle}}ListToResponse(data *domain.{{.DomainTitle}}List) *{{.DomainTitle}}ListResponse {
    if data == nil {
        return nil
    }

    return &{{.DomainTitle}}ListResponse{
        Total: data.Total,
        List:  domain{{.DomainTitle}}sToResponse(data.List),
    }
}
